<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>wawa.Optionals</name>
    </assembly>
    <members>
        <member name="T:System.Diagnostics.Contracts.PureAttribute">
            <summary>Indicates that a type or method is pure, that is, it does not make any visible state changes.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue" />, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute" /> class
            with the specified return value condition.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition is <see langword="true" /> or <see langword="false" />.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue" />,
            the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute" /> class
            with the specified return value condition.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition is <see langword="true" /> or <see langword="false" />.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute" /> class
            with the associated parameter name.
            </summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute" /> class
            with the specified parameter value.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets a value indicating whether the condition parameter value
            is <see langword="true" /> or <see langword="false" />.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute" /> class with a field or property member.
            </summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute" /> class
            with the list of field and property members.
            </summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute" /> class
            with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute" /> class
            with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition is <see langword="true" /> or <see langword="false" />.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlyCollection`1">
            <summary>Provides a read-only, covariant view of a generic list.</summary>
            <typeparam name="T">The type of item on the list.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyCollection`1.Count">
            <summary>Gets the amount of items on the list.</summary>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlyDictionary`2">
            <summary>Provides a read-only view of a generic dictionary.</summary>
            <typeparam name="TKey">The type of key in the dictionary.</typeparam>
            <typeparam name="TValue">The type of value in the dictionary.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Keys">
            <summary>Gets all enumeration of all keys.</summary>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Values">
            <summary>Gets an enumeration of all values.</summary>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)">
            <summary>Gets the value of the key.</summary>
            <param name="key">The key to index.</param>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>Determines whether a key exists in this dictionary.</summary>
            <param name="key">The key to check.</param>
            <returns>
            The value <see langword="true" /> if the key exists in the dictionary, otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>Determines whether a key exists in this dictionary and extracts the value.</summary>
            <param name="key">The key to check.</param>
            <param name="value">The value to output.</param>
            <returns>
            The value <see langword="true" /> if the key exists in the dictionary, otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlyList`1">
            <summary>Represents a read-only collection of elements that can be accessed by index.</summary>
            <typeparam name="T">The type of elements in the read-only list.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)">
            <summary>Performs an index operation on the list.</summary>
            <param name="index">The item to retrieve.</param>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlySet`1">
            <summary>Provides a readonly abstraction of a set.</summary>
            <typeparam name="T">The type of elements in the set.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.Contains(`0)">
            <summary>Determines if the set contains a specific item.</summary>
            <param name="item">The item to check if the set contains.</param>
            <returns><see langword="true" /> if found; otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determines whether the current set is a proper (strict) subset of a specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true" /> if the current set is a proper subset of other; otherwise <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determines whether the current set is a proper (strict) superset of a specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true" /> if the collection is a proper superset of other; otherwise <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determine whether the current set is a subset of a specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns><see langword="true" /> if the current set is a subset of other; otherwise <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determine whether the current set is a super set of a specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns><see langword="true" /> if the current set is a subset of other; otherwise <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determines whether the current set overlaps with the specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true" /> if the current set and other share at least one common element;
            otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determines whether the current set and the specified collection contain the same elements.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true" /> if the current set is equal to other; otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null" />.</exception>
        </member>
        <member name="T:System.Collections.Generic.ISet`1">
            <summary>
            Generic collection that guarantees the uniqueness of its elements, as defined by some comparer.
            It also supports basic set operations such as Union, Intersection, Complement and Exclusive Complement.
            </summary>
            <typeparam name="T">The type of element in the set.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Transforms this set so it contains no elements that are also in an <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>Transforms this set into its intersection with an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Transforms this set so it contains elements initially in this or an <see cref="T:System.Collections.Generic.IEnumerable`1" />, but not both.
            </summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>Transforms this set into its union with an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.Add(`0)">
            <summary>Adds an item to the set.</summary>
            <param name="item">The item to add.</param>
            <returns>The value <see langword="true" /> if added, <see langword="false" /> if duplicate.</returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Checks if this set is a subset of an <see cref="T:System.Collections.Generic.IEnumerable`1" />, but not the same as it.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
            <returns>The value <see langword="true" /> if a match is found, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Checks if this set is a superset of an <see cref="T:System.Collections.Generic.IEnumerable`1" />, but not the same as it.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
            <returns>The value <see langword="true" /> if a match is found, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Checks if this set is a subset of an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
            <returns>The value <see langword="true" /> if a match is found, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Checks if this set is a superset of an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
            <returns>The value <see langword="true" /> if a match is found, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>Checks if this set has any elements in common with an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
            <returns>The value <see langword="true" /> if a match is found, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if this set contains the same and only the same elements as an <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
            <returns>The value <see langword="true" /> if a match is found, otherwise <see langword="false" />.</returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerFilePathAttribute">
            <inheritdoc />
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerLineNumberAttribute">
            <inheritdoc />
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerMemberNameAttribute">
            <inheritdoc />
        </member>
        <member name="T:NullGuard.AllowNullAttribute">
            <summary>Prevents the injection of null checking (implicit mode only).</summary>
        </member>
        <member name="T:Wawa.Optionals.Maybe">
            <summary>Implementations for <see cref="T:Wawa.Optionals.Maybe`1" />.</summary>
        </member>
        <member name="M:Wawa.Optionals.Maybe.TryGet``1(Wawa.Optionals.Maybe{``0},``0@)">
            <summary>Assigns a value with the inner value, or a <see langword="default" /> value if none exists.</summary>
            <typeparam name="T">The generic type argument in <see cref="T:Wawa.Optionals.Maybe`1" />.</typeparam>
            <param name="that">This instance of <see cref="T:Wawa.Optionals.Maybe`1" />.</param>
            <param name="result">The resulting value, or <see langword="default" />.</param>
            <returns>
            The value <see langword="true" /> if <paramref name="that" /> contains a value, otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:Wawa.Optionals.Maybe.None``1">
            <summary>Gets an empty <see cref="T:Wawa.Optionals.Maybe`1" /> of the desired type.</summary>
            <typeparam name="T">The generic in <see cref="T:Wawa.Optionals.Maybe`1" />.</typeparam>
            <returns>
            A <see cref="T:Wawa.Optionals.Maybe`1" /> that always has <see cref="P:Wawa.Optionals.Maybe`1.IsNone" />
            <see langword="return" /> <see langword="true" />.
            </returns>
        </member>
        <member name="M:Wawa.Optionals.Maybe.Match``1(Wawa.Optionals.Maybe{``0},System.Action{``0},System.Action{Wawa.Optionals.Unit})">
            <summary>Uses the callback corresponding to the inner value of <paramref name="that" />.</summary>
            <typeparam name="T">The type of value stored within <paramref name="that" />.</typeparam>
            <param name="that">This instance of <see cref="T:Wawa.Optionals.Maybe`1" />.</param>
            <param name="some">The callback to run if <see cref="P:Wawa.Optionals.Maybe`1.IsSome" /> is <see langword="true" />.</param>
            <param name="none">The callback to run if <see cref="P:Wawa.Optionals.Maybe`1.IsSome" /> is <see langword="false" />.</param>
            <returns>The parameter <paramref name="that" />.</returns>
        </member>
        <member name="M:Wawa.Optionals.Maybe.Some``1(``0)">
            <summary>Wraps <typeparamref name="T" /> in a <see cref="T:Wawa.Optionals.Maybe`1" />.</summary>
            <remarks><para>Value types are the only types that cannot be <see langword="null" />.</para></remarks>
            <typeparam name="T">The type of parameter and generic in <see cref="T:Wawa.Optionals.Maybe`1" />.</typeparam>
            <param name="that">This instance of <typeparamref name="T" />.</param>
            <returns>A new instance of <see cref="T:Wawa.Optionals.Maybe`1" />.</returns>
        </member>
        <member name="M:Wawa.Optionals.Maybe.GetEnumerator``1(Wawa.Optionals.Maybe{``0})">
            <summary>Gets an iterator that has the value once, or is empty.</summary>
            <typeparam name="T">The type of parameter and generic in <see cref="T:Wawa.Optionals.Maybe`1" />.</typeparam>
            <param name="source">This instance of <see cref="T:Wawa.Optionals.Maybe`1" />.</param>
            <returns>An iterator that yields the inner value once, or <see cref="M:System.Linq.Enumerable.Empty``1" />.</returns>
        </member>
        <member name="M:Wawa.Optionals.Maybe.Filter``1(System.Collections.Generic.IEnumerable{Wawa.Optionals.Maybe{``0}})">
            <summary>Filters a collection with only that of items with a value.</summary>
            <typeparam name="T">The type of parameter and generic in <see cref="T:Wawa.Optionals.Maybe`1" />.</typeparam>
            <param name="source">This collection of <see cref="T:Wawa.Optionals.Maybe`1" />.</param>
            <returns>A filtered collection only consisting of unwrapped <typeparamref name="T" /> values.</returns>
        </member>
        <member name="M:Wawa.Optionals.Maybe.Flatten``1(Wawa.Optionals.Maybe{Wawa.Optionals.Maybe{``0}})">
            <summary>Flattens a nested <see cref="T:Wawa.Optionals.Maybe`1" />.</summary>
            <typeparam name="T">The type of value stored within <paramref name="that" />.</typeparam>
            <param name="that">This instance of <see cref="T:Wawa.Optionals.Maybe`1" />.</param>
            <returns>The nested <see cref="T:Wawa.Optionals.Maybe`1" />, or <see langword="default" />.</returns>
        </member>
        <member name="M:Wawa.Optionals.Maybe.Flatten``1(Wawa.Optionals.Maybe{Wawa.Optionals.Maybe{Wawa.Optionals.Maybe{``0}}})">
            <summary>Flattens a nested <see cref="T:Wawa.Optionals.Maybe`1" />.</summary>
            <typeparam name="T">The type of value stored within <paramref name="that" />.</typeparam>
            <param name="that">This instance of <see cref="T:Wawa.Optionals.Maybe`1" />.</param>
            <returns>The nested <see cref="T:Wawa.Optionals.Maybe`1" />, or <see langword="default" />.</returns>
        </member>
        <member name="M:Wawa.Optionals.Maybe.Flatten``1(Wawa.Optionals.Maybe{Wawa.Optionals.Maybe{Wawa.Optionals.Maybe{Wawa.Optionals.Maybe{``0}}}})">
            <summary>Flattens a nested <see cref="T:Wawa.Optionals.Maybe`1" />.</summary>
            <typeparam name="T">The type of value stored within <paramref name="that" />.</typeparam>
            <param name="that">This instance of <see cref="T:Wawa.Optionals.Maybe`1" />.</param>
            <returns>The nested <see cref="T:Wawa.Optionals.Maybe`1" />, or <see langword="default" />.</returns>
        </member>
        <member name="M:Wawa.Optionals.Maybe.From``1(``0)">
            <summary>Wraps <typeparamref name="T" /> in a <see cref="T:Wawa.Optionals.Maybe`1" />.</summary>
            <typeparam name="T">The type of parameter and generic in <see cref="T:Wawa.Optionals.Maybe`1" />.</typeparam>
            <param name="that">This instance of <typeparamref name="T" />.</param>
            <returns>A new instance of <see cref="T:Wawa.Optionals.Maybe`1" />.</returns>
        </member>
        <member name="M:Wawa.Optionals.Maybe.From``1(System.Nullable{``0})">
            <summary>Wraps <typeparamref name="T" /> in a <see cref="T:Wawa.Optionals.Maybe`1" />.</summary>
            <typeparam name="T">The type of parameter and generic in <see cref="T:Wawa.Optionals.Maybe`1" />.</typeparam>
            <param name="that">This instance of <typeparamref name="T" />.</param>
            <returns>A new instance of <see cref="T:Wawa.Optionals.Maybe`1" />.</returns>
        </member>
        <member name="M:Wawa.Optionals.Maybe.ToMaybe``1(System.Nullable{``0})">
            <summary>Wraps <typeparamref name="T" /> in a <see cref="T:Wawa.Optionals.Maybe`1" />.</summary>
            <remarks><para>This is an extension method for calling <see cref="M:Wawa.Optionals.Maybe.From``1(``0)" />.</para></remarks>
            <typeparam name="T">The type of parameter and generic in <see cref="T:Wawa.Optionals.Maybe`1" />.</typeparam>
            <param name="that">This instance of <typeparamref name="T" />.</param>
            <returns>A new instance of <see cref="T:Wawa.Optionals.Maybe`1" />.</returns>
        </member>
        <member name="M:Wawa.Optionals.Maybe.Match``2(Wawa.Optionals.Maybe{``0},System.Func{``0,Wawa.Optionals.Maybe{``1}})">
            <summary>Uses the callback corresponding to the inner value of <paramref name="that" />.</summary>
            <typeparam name="T">The type of value stored within <paramref name="that" />.</typeparam>
            <typeparam name="TResult">The <see langword="return" /> value of both callbacks.</typeparam>
            <param name="that">This instance of <see cref="T:Wawa.Optionals.Maybe`1" />.</param>
            <param name="some">The callback to run if <see cref="P:Wawa.Optionals.Maybe`1.IsSome" /> is <see langword="true" />.</param>
            <returns>The value returned from the corresponding callback.</returns>
        </member>
        <member name="M:Wawa.Optionals.Maybe.Match``2(Wawa.Optionals.Maybe{``0},System.Func{``0,``1})">
            <summary>Uses the callback corresponding to the inner value of <paramref name="that" />.</summary>
            <typeparam name="T">The type of value stored within <paramref name="that" />.</typeparam>
            <typeparam name="TResult">The <see langword="return" /> value of both callbacks.</typeparam>
            <param name="that">This instance of <see cref="T:Wawa.Optionals.Maybe`1" />.</param>
            <param name="some">The callback to run if <see cref="P:Wawa.Optionals.Maybe`1.IsSome" /> is <see langword="true" />.</param>
            <returns>The value returned from the callback, or <see langword="default" />.</returns>
        </member>
        <member name="M:Wawa.Optionals.Maybe.Match``2(Wawa.Optionals.Maybe{``0},``1)">
            <summary>Gives the parameter corresponding to the inner value of <paramref name="that" />.</summary>
            <typeparam name="T">The type of value stored within <paramref name="that" />.</typeparam>
            <typeparam name="TResult">The <see langword="return" /> value of both callbacks.</typeparam>
            <param name="that">This instance of <see cref="T:Wawa.Optionals.Maybe`1" />.</param>
            <param name="some">The value to return if <see cref="P:Wawa.Optionals.Maybe`1.IsSome" /> is <see langword="true" />.</param>
            <returns>The parameter, or <see langword="default" />.</returns>
        </member>
        <member name="M:Wawa.Optionals.Maybe.Unwrap``1(Wawa.Optionals.Maybe{``0})">
            <summary>
            Gets the value that is encapsulated. This value returned will not be <see langword="null" />,
            and consequentially if it is.
            </summary>
            <typeparam name="T">The type of value stored within <paramref name="that" />.</typeparam>
            <param name="that">This instance of <see cref="T:Wawa.Optionals.Maybe`1" />.</param>
            <exception cref="T:System.InvalidOperationException">
            The parameter <paramref name="that" /> has <see cref="P:Wawa.Optionals.Maybe`1.IsSome" /> set to <see langword="false" />.
            </exception>
            <returns>The inner value.</returns>
        </member>
        <member name="M:Wawa.Optionals.Maybe.UnwrapOr``1(Wawa.Optionals.Maybe{``0},``0)">
            <summary>Gives the inner value, or the parameter.</summary>
            <typeparam name="T">The type of value stored within <paramref name="that" />.</typeparam>
            <param name="that">This instance of <see cref="T:Wawa.Optionals.Maybe`1" />.</param>
            <param name="otherwise">The value to return if <see cref="P:Wawa.Optionals.Maybe`1.IsSome" /> is <see langword="false" />.</param>
            <returns>The inner value, or the parameter <paramref name="otherwise" />.</returns>
        </member>
        <member name="M:Wawa.Optionals.Maybe.UnwrapOr``1(Wawa.Optionals.Maybe{``0},System.Func{Wawa.Optionals.Unit,``0})">
            <summary>Gives the inner value, or the returned value from the callback.</summary>
            <typeparam name="T">The type of value stored within <paramref name="that" />.</typeparam>
            <param name="that">This instance of <see cref="T:Wawa.Optionals.Maybe`1" />.</param>
            <param name="otherwise">
            The callback to execute if <see cref="P:Wawa.Optionals.Maybe`1.IsSome" /> is <see langword="false" />.
            </param>
            <returns>The inner value, or the returned value from the parameter <paramref name="otherwise" />.</returns>
        </member>
        <member name="M:Wawa.Optionals.Maybe.UnwrapOrDefault``1(Wawa.Optionals.Maybe{``0})">
            <summary>Gives the inner value, or <see langword="default" />.</summary>
            <typeparam name="T">The type of value stored within <paramref name="that" />.</typeparam>
            <param name="that">This instance of <see cref="T:Wawa.Optionals.Maybe`1" />.</param>
            <returns>The inner value, or <see langword="default" />.</returns>
        </member>
        <member name="M:Wawa.Optionals.Maybe.UnwrapOrNew``1(Wawa.Optionals.Maybe{``0})">
            <summary>Gives the inner value, or a <see langword="new" /> instance.</summary>
            <typeparam name="T">The type of value stored within <paramref name="that" />.</typeparam>
            <param name="that">This instance of <see cref="T:Wawa.Optionals.Maybe`1" />.</param>
            <returns>The inner value, or a <see langword="new" /> instance.</returns>
        </member>
        <member name="M:Wawa.Optionals.Maybe.Match``2(Wawa.Optionals.Maybe{``0},System.Func{``0,``1},System.Func{Wawa.Optionals.Unit,``1})">
            <summary>Uses the callback corresponding to the inner value of <paramref name="that" />.</summary>
            <typeparam name="T">The type of value stored within <paramref name="that" />.</typeparam>
            <typeparam name="TResult">The <see langword="return" /> value of both callbacks.</typeparam>
            <param name="that">This instance of <see cref="T:Wawa.Optionals.Maybe`1" />.</param>
            <param name="some">The callback to run if <see cref="P:Wawa.Optionals.Maybe`1.IsSome" /> is <see langword="true" />.</param>
            <param name="none">The callback to run if <see cref="P:Wawa.Optionals.Maybe`1.IsSome" /> is <see langword="false" />.</param>
            <returns>The value returned from the corresponding callback.</returns>
        </member>
        <member name="M:Wawa.Optionals.Maybe.Match``2(Wawa.Optionals.Maybe{``0},``1,``1)">
            <summary>Gives the parameter corresponding to the inner value of <paramref name="that" />.</summary>
            <typeparam name="T">The type of value stored within <paramref name="that" />.</typeparam>
            <typeparam name="TResult">The <see langword="return" /> value of both callbacks.</typeparam>
            <param name="that">This instance of <see cref="T:Wawa.Optionals.Maybe`1" />.</param>
            <param name="some">The value to return if <see cref="P:Wawa.Optionals.Maybe`1.IsSome" /> is <see langword="true" />.</param>
            <param name="none">The value to return if <see cref="P:Wawa.Optionals.Maybe`1.IsSome" /> is <see langword="false" />.</param>
            <returns>The corresponding parameter.</returns>
        </member>
        <member name="T:Wawa.Optionals.Maybe`1">
            <summary>A type representing an optional value; Either Some and contains a value, or None, and does not.</summary>
            <typeparam name="T">The type to encapsulate and project as an optional value.</typeparam>
        </member>
        <member name="M:Wawa.Optionals.Maybe`1.#ctor(`0)">
            <summary>Initializes a new instance of the <see cref="T:Wawa.Optionals.Maybe`1" /> struct.</summary>
            <param name="value">The value to encapsulate.</param>
        </member>
        <member name="P:Wawa.Optionals.Maybe`1.IsNone">
            <summary>Gets a value indicating whether the value encapsulated is <see langword="null" />.</summary>
        </member>
        <member name="P:Wawa.Optionals.Maybe`1.IsSome">
            <summary>Gets a value indicating whether the value encapsulated is not <see langword="null" />.</summary>
        </member>
        <member name="P:Wawa.Optionals.Maybe`1.Value">
            <summary>Gets the value that is encapsulated. This value returned may be <see langword="null" />.<p /><c>[ProvidesContext]</c></summary>
        </member>
        <member name="M:Wawa.Optionals.Maybe`1.op_Implicit(`0)~Wawa.Optionals.Maybe{`0}">
            <summary>Converts the <typeparamref name="T" /> to a <see langword="new" /> <see cref="T:Wawa.Optionals.Maybe`1" />.</summary>
            <param name="value">The <typeparamref name="T" /> instance to convert.</param>
            <returns>
            A <see cref="T:Wawa.Optionals.Maybe`1" /> that is Some or None depending on
            whether <paramref name="value" /> is <see langword="null" />.
            </returns>
        </member>
        <member name="M:Wawa.Optionals.Maybe`1.op_Explicit(Wawa.Optionals.Maybe{`0})~`0">
            <summary>Converts the <see cref="T:Wawa.Optionals.Maybe`1" /> to <typeparamref name="T" />.</summary>
            <param name="value">The <typeparamref name="T" /> instance to convert.</param>
            <returns>The inner value.</returns>
            <exception cref="T:System.InvalidOperationException">The parameter <paramref name="value" /> is a None value.</exception>
        </member>
        <member name="M:Wawa.Optionals.Maybe`1.op_Equality(Wawa.Optionals.Maybe{`0},Wawa.Optionals.Maybe{`0})">
            <summary>Determines whether both instances contain the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true" /> if both instances contain the same values,
            otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:Wawa.Optionals.Maybe`1.op_Inequality(Wawa.Optionals.Maybe{`0},Wawa.Optionals.Maybe{`0})">
            <summary>Determines whether both instances do not contain the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true" /> if both instances do not contain the same values,
            otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Wawa.Optionals.Maybe`1.Clone">
            <inheritdoc />
        </member>
        <member name="M:Wawa.Optionals.Maybe`1.Equals(Wawa.Optionals.Maybe{`0})">
            <inheritdoc />
        </member>
        <member name="M:Wawa.Optionals.Maybe`1.Equals(Wawa.Optionals.Maybe{`0},Wawa.Optionals.Maybe{`0})">
            <inheritdoc />
        </member>
        <member name="M:Wawa.Optionals.Maybe`1.GetHashCode(Wawa.Optionals.Maybe{`0})">
            <inheritdoc />
        </member>
        <member name="M:Wawa.Optionals.Maybe`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.Optionals.Maybe`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Wawa.Optionals.Maybe`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:Wawa.Optionals.Unit">
            <summary>
            A type that has exactly one value, and is used when there is no other meaningful value that could be returned.
            </summary>
        </member>
        <member name="P:Wawa.Optionals.Unit.Value">
            <summary>Gets the singular value.</summary>
        </member>
        <member name="M:Wawa.Optionals.Unit.op_Equality(Wawa.Optionals.Unit,Wawa.Optionals.Unit)">
            <summary>Returns <see langword="true" />.</summary>
            <remarks><para>Since this type has one value, any instance is the same as each other.</para></remarks>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>The value <see langword="true" />.</returns>
        </member>
        <member name="M:Wawa.Optionals.Unit.op_Inequality(Wawa.Optionals.Unit,Wawa.Optionals.Unit)">
            <summary>Returns <see langword="false" />.</summary>
            <remarks><para>Since this type has one value, any instance is the same as each other.</para></remarks>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>The value <see langword="false" />.</returns>
        </member>
        <member name="M:Wawa.Optionals.Unit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Wawa.Optionals.Unit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.Optionals.Unit.System#IEquatable{Wawa#Optionals#Unit}#Equals(Wawa.Optionals.Unit)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.Optionals.Unit.System#Collections#Generic#IEqualityComparer{Wawa#Optionals#Unit}#Equals(Wawa.Optionals.Unit,Wawa.Optionals.Unit)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.Optionals.Unit.System#Collections#Generic#IEqualityComparer{Wawa#Optionals#Unit}#GetHashCode(Wawa.Optionals.Unit)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.Optionals.Unit.System#ICloneable#Clone">
            <inheritdoc />
        </member>
    </members>
</doc>
