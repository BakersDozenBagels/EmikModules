<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>wawa.IO</name>
    </assembly>
    <members>
        <member name="T:System.Diagnostics.Contracts.PureAttribute">
            <summary>Indicates that a type or method is pure, that is, it does not make any visible state changes.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue" />, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute" /> class
            with the specified return value condition.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition is <see langword="true" /> or <see langword="false" />.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue" />,
            the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute" /> class
            with the specified return value condition.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition is <see langword="true" /> or <see langword="false" />.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute" /> class
            with the associated parameter name.
            </summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute" /> class
            with the specified parameter value.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets a value indicating whether the condition parameter value
            is <see langword="true" /> or <see langword="false" />.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute" /> class with a field or property member.
            </summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute" /> class
            with the list of field and property members.
            </summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute" /> class
            with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute" /> class
            with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition is <see langword="true" /> or <see langword="false" />.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlyCollection`1">
            <summary>Provides a read-only, covariant view of a generic list.</summary>
            <typeparam name="T">The type of item on the list.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyCollection`1.Count">
            <summary>Gets the amount of items on the list.</summary>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlyDictionary`2">
            <summary>Provides a read-only view of a generic dictionary.</summary>
            <typeparam name="TKey">The type of key in the dictionary.</typeparam>
            <typeparam name="TValue">The type of value in the dictionary.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Keys">
            <summary>Gets all enumeration of all keys.</summary>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Values">
            <summary>Gets an enumeration of all values.</summary>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)">
            <summary>Gets the value of the key.</summary>
            <param name="key">The key to index.</param>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>Determines whether a key exists in this dictionary.</summary>
            <param name="key">The key to check.</param>
            <returns>
            The value <see langword="true" /> if the key exists in the dictionary, otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>Determines whether a key exists in this dictionary and extracts the value.</summary>
            <param name="key">The key to check.</param>
            <param name="value">The value to output.</param>
            <returns>
            The value <see langword="true" /> if the key exists in the dictionary, otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlyList`1">
            <summary>Represents a read-only collection of elements that can be accessed by index.</summary>
            <typeparam name="T">The type of elements in the read-only list.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)">
            <summary>Performs an index operation on the list.</summary>
            <param name="index">The item to retrieve.</param>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlySet`1">
            <summary>Provides a readonly abstraction of a set.</summary>
            <typeparam name="T">The type of elements in the set.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.Contains(`0)">
            <summary>Determines if the set contains a specific item.</summary>
            <param name="item">The item to check if the set contains.</param>
            <returns><see langword="true" /> if found; otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determines whether the current set is a proper (strict) subset of a specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true" /> if the current set is a proper subset of other; otherwise <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determines whether the current set is a proper (strict) superset of a specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true" /> if the collection is a proper superset of other; otherwise <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determine whether the current set is a subset of a specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns><see langword="true" /> if the current set is a subset of other; otherwise <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determine whether the current set is a super set of a specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns><see langword="true" /> if the current set is a subset of other; otherwise <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determines whether the current set overlaps with the specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true" /> if the current set and other share at least one common element;
            otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determines whether the current set and the specified collection contain the same elements.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true" /> if the current set is equal to other; otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null" />.</exception>
        </member>
        <member name="T:System.Collections.Generic.ISet`1">
            <summary>
            Generic collection that guarantees the uniqueness of its elements, as defined by some comparer.
            It also supports basic set operations such as Union, Intersection, Complement and Exclusive Complement.
            </summary>
            <typeparam name="T">The type of element in the set.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Transforms this set so it contains no elements that are also in an <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>Transforms this set into its intersection with an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Transforms this set so it contains elements initially in this or an <see cref="T:System.Collections.Generic.IEnumerable`1" />, but not both.
            </summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>Transforms this set into its union with an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.Add(`0)">
            <summary>Adds an item to the set.</summary>
            <param name="item">The item to add.</param>
            <returns>The value <see langword="true" /> if added, <see langword="false" /> if duplicate.</returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Checks if this set is a subset of an <see cref="T:System.Collections.Generic.IEnumerable`1" />, but not the same as it.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
            <returns>The value <see langword="true" /> if a match is found, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Checks if this set is a superset of an <see cref="T:System.Collections.Generic.IEnumerable`1" />, but not the same as it.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
            <returns>The value <see langword="true" /> if a match is found, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Checks if this set is a subset of an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
            <returns>The value <see langword="true" /> if a match is found, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Checks if this set is a superset of an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
            <returns>The value <see langword="true" /> if a match is found, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>Checks if this set has any elements in common with an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
            <returns>The value <see langword="true" /> if a match is found, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if this set contains the same and only the same elements as an <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
            <returns>The value <see langword="true" /> if a match is found, otherwise <see langword="false" />.</returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerFilePathAttribute">
            <inheritdoc />
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerLineNumberAttribute">
            <inheritdoc />
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerMemberNameAttribute">
            <inheritdoc />
        </member>
        <member name="T:NullGuard.AllowNullAttribute">
            <summary>Prevents the injection of null checking (implicit mode only).</summary>
        </member>
        <member name="T:Wawa.IO.Config">
            <summary>Implementations for <see cref="T:Wawa.IO.Config`1" />.</summary>
        </member>
        <member name="F:Wawa.IO.Config.Folder">
            <summary>The name of the folder that contains locally stored mod settings.</summary>
        </member>
        <member name="F:Wawa.IO.Config.Tutorial">
            <summary>The key substring that is ignored in mod configs.</summary>
        </member>
        <member name="M:Wawa.IO.Config.Serialize``1(``0)">
            <summary>Serializes settings the same way it's written to the file. Supports settings that use enums.</summary>
            <typeparam name="TSerialize">The type to serialize the value.</typeparam>
            <param name="value">The value to serialize.</param>
            <returns>A <see cref="T:System.String" /> representation of <paramref name="value" /> by serializing it as JSON.</returns>
        </member>
        <member name="M:Wawa.IO.Config.Write``1(Wawa.IO.Config{``0},System.String)">
            <summary>Writes the string to the settings file.</summary>
            <remarks><para>
            To protect the user settings, this does nothing if the last read wasn't successful.
            </para><para>
            In the editor, this method does nothing.
            </para></remarks>
            <typeparam name="T">The generic used in <paramref name="that" />.</typeparam>
            <param name="that">This instance of <see cref="T:Wawa.IO.Config`1" />.</param>
            <param name="value">The contents to write.</param>
            <returns>The parameter <paramref name="that" />.</returns>
        </member>
        <member name="M:Wawa.IO.Config.Write``1(Wawa.IO.Config{``0},``0)">
            <summary>Writes the settings to the settings file.</summary>
            <remarks><para>
            To protect the user settings, this does nothing if the last read wasn't successful.
            </para><para>
            In the editor, this method does nothing.
            </para></remarks>
            <typeparam name="T">The generic used in <paramref name="that" />.</typeparam>
            <param name="that">This instance of <see cref="T:Wawa.IO.Config`1" />.</param>
            <param name="value">The value to overwrite the settings file with.</param>
            <returns>The value <see langword="default" />.</returns>
        </member>
        <member name="M:Wawa.IO.Config.Merge``1(Wawa.IO.Config{``0},``0,System.Boolean)">
            <summary>Reads, merges, and writes the settings to the settings file.</summary>
            <remarks><para>
            To protect the user settings, this does nothing if the last read wasn't successful.
            </para><para>
            In the editor, this method does nothing.
            </para></remarks>
            <typeparam name="T">The generic used in <paramref name="that" />.</typeparam>
            <param name="that">This instance of <see cref="T:Wawa.IO.Config`1" />.</param>
            <param name="value">The value to merge the file with.</param>
            <param name="isDiscarding">Determines whether it should remove values from the original
            file that isn't contained within the type, or has the incorrect type.</param>
            <returns>The parameter <paramref name="that" />.</returns>
        </member>
        <member name="M:Wawa.IO.Config.Read``1(Wawa.IO.Config{``0})">
            <summary>Reads the settings from the settings file.</summary>
            <remarks><para>
            If the settings couldn't be read, the default settings will be returned.
            </para><para>
            In the editor, this method returns the default value of the constructor in <typeparamref name="T" />.
            </para></remarks>
            <typeparam name="T">The generic used in <paramref name="that" />.</typeparam>
            <param name="that">This instance of <see cref="T:Wawa.IO.Config`1" />.</param>
            <returns>
            If the read and deserialization was successful, a <typeparamref name="T" /> containing the values from the file,
            otherwise a new instance of <typeparamref name="T" />.
            </returns>
        </member>
        <member name="T:Wawa.IO.Config`1">
            <summary>Meant for information that needs to be deserialized within the mod settings folder.</summary>
            <remarks><para>
            Originally by samfundev:
            <see href="https://github.com/Qkrisi/ktanemodkit/blob/master/Assets/Scripts/ModConfig.cs" />.
            </para></remarks>
            <typeparam name="T">The type to serialize and deserialize the file.</typeparam>
        </member>
        <member name="M:Wawa.IO.Config`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Wawa.IO.Config`1" /> class.
            The target file name is implicitly gotten by the name of the assembly that called this.
            Allows specification of an optional event of when the file is read.
            A file will automatically be made if it doesn't exist.
            A JSON property defined in the type <typeparamref name="T" />
            that isn't in the file will automatically write to the file with said property.
            In the editor, the constructor will not merge the default values of the type with the file.
            </summary>
        </member>
        <member name="M:Wawa.IO.Config`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Wawa.IO.Config`1" /> class.
            Allows specification of the target file name.
            A file will automatically be made if it doesn't exist.
            A JSON property defined in the type <typeparamref name="T" />
            that isn't in the file will automatically write to the file with said property.
            In the editor, the constructor will not merge the default values of the type with the file.
            </summary>
            <param name="fileName">The file name to get.</param>
        </member>
        <member name="P:Wawa.IO.Config`1.HasRead">
            <summary>Gets a value indicating whether or not there has been a successful read of the settings file.</summary>
            <remarks><para>This value will always be false in the editor.</para></remarks>
        </member>
        <member name="P:Wawa.IO.Config`1.FilePath">
            <summary>Gets the path of the file to read and write.<p /><c>[ProvidesContext]</c></summary>
        </member>
        <member name="M:Wawa.IO.Config`1.op_Equality(Wawa.IO.Config{`0},Wawa.IO.Config{`0})">
            <summary>Determines whether both instances are both <see langword="null" /> or both instances.</summary>
            <param name="left">The left-hand side operator.</param>
            <param name="right">The right-hand side operator.</param>
            <returns>
            The value <see langword="true" /> if both share the same <see cref="P:Wawa.IO.Config`1.FilePath" />,
            otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:Wawa.IO.Config`1.op_Inequality(Wawa.IO.Config{`0},Wawa.IO.Config{`0})">
            <summary>Determines whether both instances are one of <see langword="null" /> and the other instanced.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true" /> if both do not share the same <see cref="P:Wawa.IO.Config`1.FilePath" />,
            otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:Wawa.IO.Config`1.Equals(Wawa.IO.Config{`0})">
            <inheritdoc />
        </member>
        <member name="M:Wawa.IO.Config`1.Equals(Wawa.IO.Config{`0},Wawa.IO.Config{`0})">
            <inheritdoc />
        </member>
        <member name="M:Wawa.IO.Config`1.GetHashCode(Wawa.IO.Config{`0})">
            <inheritdoc />
        </member>
        <member name="M:Wawa.IO.Config`1.Clone">
            <inheritdoc />
        </member>
        <member name="M:Wawa.IO.Config`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.IO.Config`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Wawa.IO.Config`1.ToString">
            <summary>
            Deserializes, then re-serializes the file according to <see cref="M:Wawa.IO.Config.Serialize``1(``0)" />.
            In the editor, this method serializes the default value of the constructor in <typeparamref name="T" />.
            </summary>
            <returns>A string representation of the value from <see cref="M:Wawa.IO.Config.Read``1(Wawa.IO.Config{``0})" />.</returns>
        </member>
        <member name="T:Wawa.IO.Internals.Globals">
            <summary>Contains static methods able to be accessed from anywhere within this library.</summary>
        </member>
        <member name="F:Wawa.IO.Internals.Globals.Ordinal">
            <summary>The default string comparison throughout the library.</summary>
        </member>
        <member name="M:Wawa.IO.Internals.Globals.SuppressIO``1(``0,System.Action{``0}@)">
            <summary>Runs and catches various exception types found in IO operations.</summary>
            <typeparam name="T">The type of parameter.</typeparam>
            <param name="item">The item to pass in.</param>
            <param name="action">The name to run.</param>
        </member>
        <member name="M:Wawa.IO.Internals.Globals.OrdinalEquals(System.String,System.String@)">
            <summary>Compares two strings based on <see cref="F:System.StringComparison.Ordinal" />.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>Whether the two values are the same based on <see cref="F:System.StringComparison.Ordinal" />.</returns>
        </member>
        <member name="M:Wawa.IO.Internals.Globals.Get``2(``0,System.Func{``0,``1}@,System.Func{``0,``1}@)">
            <summary>Computes an expensive computation, then caches it in subsequent calls.</summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <typeparam name="TResult">The type of return.</typeparam>
            <param name="key">The parameter of the method.</param>
            <param name="factory">The expensive callback.</param>
            <param name="editorFactory">The expensive callback exclusive to the editor.</param>
            <returns>The value from the first time <paramref name="factory" /> was invoked.</returns>
        </member>
        <member name="M:Wawa.IO.Internals.Globals.SuppressIO``2(``0,System.Func{``0,``1}@,System.Boolean@)">
            <summary>
            Runs and returns the parameter, and catches various exception types found in IO operations.
            A caught <see cref="T:System.Exception" /> will <see langword="return" /> <see langword="default" />.
            </summary>
            <typeparam name="T">The type of parameter.</typeparam>
            <typeparam name="TResult">The type of return.</typeparam>
            <param name="item">The item to pass in.</param>
            <param name="func">The name to run.</param>
            <param name="force">Whether to force execution regardless if in editor or not.</param>
            <returns>
            The returned value of <paramref file="func" />, or <see langword="default" />
            in the event of an <see cref="T:System.Exception" /> related to files.
            </returns>
        </member>
        <member name="T:Wawa.IO.ModInfo">
            <summary>
            Contains the properties needed to perform JSON-deserialization
            of a modInfo.json located in the root directory of a mod.
            </summary>
        </member>
        <member name="F:Wawa.IO.ModInfo.FileName">
            <summary>The file name used for this type.</summary>
        </member>
        <member name="P:Wawa.IO.ModInfo.Author">
            <summary>Gets the author(s) of the mod.</summary>
        </member>
        <member name="P:Wawa.IO.ModInfo.Description">
            <summary>Gets the description of the mod.</summary>
        </member>
        <member name="P:Wawa.IO.ModInfo.Id">
            <summary>Gets the id of the mod.</summary>
        </member>
        <member name="P:Wawa.IO.ModInfo.Title">
            <summary>Gets the title of the mod.</summary>
        </member>
        <member name="P:Wawa.IO.ModInfo.UnityVersion">
            <summary>Gets the Unity version used to compile the mod.</summary>
        </member>
        <member name="P:Wawa.IO.ModInfo.Version">
            <summary>Gets the version number of the mod.</summary>
        </member>
        <member name="M:Wawa.IO.ModInfo.op_Equality(Wawa.IO.ModInfo,Wawa.IO.ModInfo)">
            <summary>Determines whether both instances contain the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>The value <see langword="true" /> if both instances contain the same values.</returns>
        </member>
        <member name="M:Wawa.IO.ModInfo.op_Inequality(Wawa.IO.ModInfo,Wawa.IO.ModInfo)">
            <summary>Determines whether both instances do not contain the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>The value <see langword="true" /> if both instances do not contain the same values.</returns>
        </member>
        <member name="M:Wawa.IO.ModInfo.Deserialize(System.String)">
            <summary>Tries to deserialize the parameter as <see cref="T:Wawa.IO.ModInfo" />.</summary>
            <param name="contents">The contents to a modInfo.json.</param>
            <returns>
            A <see cref="T:Wawa.Optionals.Maybe`1" /> containing either a <see langword="new" /> instance
            of <see cref="T:Wawa.IO.ModInfo" /> which has the information of the file if the serialization is successful,
            or no value if the file couldn't be read/located.
            </returns>
        </member>
        <member name="M:Wawa.IO.ModInfo.ReadThenDeserialize(System.String)">
            <summary>
            Attempts to read the specified path to try to deserialize its contents as <see cref="T:Wawa.IO.ModInfo" />.
            </summary>
            <param name="path">The contents to a modInfo.json.</param>
            <returns>
            A <see cref="T:Wawa.Optionals.Maybe`1" /> containing either a <see langword="new" /> instance
            of <see cref="T:Wawa.IO.ModInfo" /> which has the information of the file if the serialization is successful,
            or no value if the file couldn't be read/located.
            </returns>
        </member>
        <member name="M:Wawa.IO.ModInfo.Equals(Wawa.IO.ModInfo)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.IO.ModInfo.Equals(Wawa.IO.ModInfo,Wawa.IO.ModInfo)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.IO.ModInfo.GetHashCode(Wawa.IO.ModInfo)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.IO.ModInfo.Clone">
            <inheritdoc />
        </member>
        <member name="M:Wawa.IO.ModInfo.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.IO.ModInfo.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Wawa.IO.ModInfo.ToString">
            <inheritdoc />
        </member>
        <member name="T:Wawa.IO.PathFinder">
            <summary>Access to the paths and contents of files within folder mod directory.</summary>
        </member>
        <member name="P:Wawa.IO.PathFinder.Caller">
            <summary>Gets the <see cref="T:System.Reflection.AssemblyName" /> of the caller that invoked the method calling this.</summary>
            <remarks><para>This is used by the library to log itself, and obtain information about callers.</para></remarks>
        </member>
        <member name="P:Wawa.IO.PathFinder.Who">
            <summary>Gets the name of <see cref="P:Wawa.IO.PathFinder.Caller" />.</summary>
        </member>
        <member name="P:Wawa.IO.PathFinder.Which">
            <summary>Gets the version of <see cref="P:Wawa.IO.PathFinder.Caller" />.</summary>
        </member>
        <member name="M:Wawa.IO.PathFinder.AssemblyLog(System.String)">
            <summary>Logs a message to the Unity Console with the assembly's name that called this.</summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Wawa.IO.PathFinder.GetDirectory(System.String)">
            <summary>Gets the absolute dir of the directory from folder mod.</summary>
            <param name="assembly">
            The name of the assembly which is used to get the mod directory of the mod.
            If <see langword="null" />, implicitly gets the directory of the mod from the file of the assembly.
            </param>
            <returns>
            A <see cref="T:Wawa.Optionals.Maybe`1" />, consisting of either folder <see cref="T:System.String" /> of the absolute directory
            of the file if there is a folder mod id entry within the game's mod dictionary, or <see langword="default" />.
            </returns>
        </member>
        <member name="M:Wawa.IO.PathFinder.GetFile(System.String,System.String)">
            <summary>Gets the absolute dir of folder file located inside folder mod.</summary>
            <param name="file">The file located inside folder mod directory.</param>
            <param name="assembly">
            The name of the assembly which is used to get the mod directory of the mod.
            If <see langword="null" />, implicitly gets the directory of the mod from the file of the assembly.
            </param>
            <returns>
            A <see cref="T:Wawa.Optionals.Maybe`1" />, consisting of either folder <see cref="T:System.String" /> of the absolute directory
            of the file if the mod directory and file were found, or <see langword="default" />.
            </returns>
        </member>
        <member name="M:Wawa.IO.PathFinder.GetModInfo(System.String)">
            <summary>Gets and deserializes the <see cref="T:Wawa.IO.ModInfo" /> file located in every mod's root directory.</summary>
            <param name="assembly">
            The name of the assembly which is used to get the mod directory of the mod.
            If <see langword="null" />, implicitly gets the directory of the mod from the file of the assembly.
            </param>
            <returns>
            A <see cref="T:Wawa.Optionals.Maybe`1" />, consisting of either folder <see cref="T:Wawa.IO.ModInfo" /> if the file was read
            and deserialized successfully, or <see langword="default" />.
            </returns>
        </member>
        <member name="M:Wawa.IO.PathFinder.GetAssets``1(System.String,System.String)">
            <summary>Loads and returns assets from disk.</summary>
            <typeparam name="T">The type of asset to get.</typeparam>
            <param name="file">The file which contains the assets.</param>
            <param name="assembly">
            The name of the assembly which is used to get the mod directory of the mod.
            If <see langword="null" />, implicitly gets the directory of the mod from the file of the assembly.
            </param>
            <returns>
            A <see cref="T:Wawa.Optionals.Maybe`1" />, consisting of either an <see cref="T:System.Array" /> of <typeparamref file="T" />
            from the assets in the file specified, or <see langword="default" /> in the event of an error.
            </returns>
        </member>
        <member name="M:Wawa.IO.PathFinder.GetUnmanaged``1(System.String,System.String,System.String)">
            <summary>Gets an unmanaged function from an external library.</summary>
            <typeparam name="T">The signature of the function.</typeparam>
            <param name="file">The external file.</param>
            <param name="method">The name of the method.</param>
            <param name="assembly">
            The name of the assembly which is used to get the mod directory of the mod. If <see langword="null" />,
            implicitly gets the directory of the mod from the file of the assembly.
            </param>
            <returns>
            The value <see langword="true" /> if copying the file was successful, otherwise <see langword="false" />.
            </returns>
        </member>
    </members>
</doc>
