<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>wawa.Modules</name>
    </assembly>
    <members>
        <member name="T:System.Diagnostics.Contracts.PureAttribute">
            <summary>Indicates that a type or method is pure, that is, it does not make any visible state changes.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue" />, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute" /> class
            with the specified return value condition.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition is <see langword="true" /> or <see langword="false" />.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue" />,
            the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute" /> class
            with the specified return value condition.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition is <see langword="true" /> or <see langword="false" />.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute" /> class
            with the associated parameter name.
            </summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute" /> class
            with the specified parameter value.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets a value indicating whether the condition parameter value
            is <see langword="true" /> or <see langword="false" />.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute" /> class with a field or property member.
            </summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute" /> class
            with the list of field and property members.
            </summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute" /> class
            with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute" /> class
            with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition is <see langword="true" /> or <see langword="false" />.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlyCollection`1">
            <summary>Provides a read-only, covariant view of a generic list.</summary>
            <typeparam name="T">The type of item on the list.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyCollection`1.Count">
            <summary>Gets the amount of items on the list.</summary>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlyDictionary`2">
            <summary>Provides a read-only view of a generic dictionary.</summary>
            <typeparam name="TKey">The type of key in the dictionary.</typeparam>
            <typeparam name="TValue">The type of value in the dictionary.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Keys">
            <summary>Gets all enumeration of all keys.</summary>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Values">
            <summary>Gets an enumeration of all values.</summary>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)">
            <summary>Gets the value of the key.</summary>
            <param name="key">The key to index.</param>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>Determines whether a key exists in this dictionary.</summary>
            <param name="key">The key to check.</param>
            <returns>
            The value <see langword="true" /> if the key exists in the dictionary, otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>Determines whether a key exists in this dictionary and extracts the value.</summary>
            <param name="key">The key to check.</param>
            <param name="value">The value to output.</param>
            <returns>
            The value <see langword="true" /> if the key exists in the dictionary, otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlyList`1">
            <summary>Represents a read-only collection of elements that can be accessed by index.</summary>
            <typeparam name="T">The type of elements in the read-only list.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)">
            <summary>Performs an index operation on the list.</summary>
            <param name="index">The item to retrieve.</param>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlySet`1">
            <summary>Provides a readonly abstraction of a set.</summary>
            <typeparam name="T">The type of elements in the set.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.Contains(`0)">
            <summary>Determines if the set contains a specific item.</summary>
            <param name="item">The item to check if the set contains.</param>
            <returns><see langword="true" /> if found; otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determines whether the current set is a proper (strict) subset of a specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true" /> if the current set is a proper subset of other; otherwise <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determines whether the current set is a proper (strict) superset of a specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true" /> if the collection is a proper superset of other; otherwise <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determine whether the current set is a subset of a specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns><see langword="true" /> if the current set is a subset of other; otherwise <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determine whether the current set is a super set of a specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns><see langword="true" /> if the current set is a subset of other; otherwise <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determines whether the current set overlaps with the specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true" /> if the current set and other share at least one common element;
            otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determines whether the current set and the specified collection contain the same elements.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true" /> if the current set is equal to other; otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null" />.</exception>
        </member>
        <member name="T:System.Collections.Generic.ISet`1">
            <summary>
            Generic collection that guarantees the uniqueness of its elements, as defined by some comparer.
            It also supports basic set operations such as Union, Intersection, Complement and Exclusive Complement.
            </summary>
            <typeparam name="T">The type of element in the set.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Transforms this set so it contains no elements that are also in an <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>Transforms this set into its intersection with an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Transforms this set so it contains elements initially in this or an <see cref="T:System.Collections.Generic.IEnumerable`1" />, but not both.
            </summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>Transforms this set into its union with an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.Add(`0)">
            <summary>Adds an item to the set.</summary>
            <param name="item">The item to add.</param>
            <returns>The value <see langword="true" /> if added, <see langword="false" /> if duplicate.</returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Checks if this set is a subset of an <see cref="T:System.Collections.Generic.IEnumerable`1" />, but not the same as it.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
            <returns>The value <see langword="true" /> if a match is found, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Checks if this set is a superset of an <see cref="T:System.Collections.Generic.IEnumerable`1" />, but not the same as it.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
            <returns>The value <see langword="true" /> if a match is found, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Checks if this set is a subset of an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
            <returns>The value <see langword="true" /> if a match is found, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Checks if this set is a superset of an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
            <returns>The value <see langword="true" /> if a match is found, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>Checks if this set has any elements in common with an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
            <returns>The value <see langword="true" /> if a match is found, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if this set contains the same and only the same elements as an <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
            <returns>The value <see langword="true" /> if a match is found, otherwise <see langword="false" />.</returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerFilePathAttribute">
            <inheritdoc />
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerLineNumberAttribute">
            <inheritdoc />
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerMemberNameAttribute">
            <inheritdoc />
        </member>
        <member name="T:NullGuard.AllowNullAttribute">
            <summary>Prevents the injection of null checking (implicit mode only).</summary>
        </member>
        <member name="T:Wawa.Modules.Internals.Globals">
            <summary>Contains static methods able to be accessed from anywhere within this library.</summary>
        </member>
        <member name="F:Wawa.Modules.Internals.Globals.Ordinal">
            <summary>The default string comparison throughout the library.</summary>
        </member>
        <member name="M:Wawa.Modules.Internals.Globals.ToReadOnly``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1}@)">
            <summary>Enumerates a sequence twice with a selector and produces an immutable array of its contents.</summary>
            <typeparam name="TSource">The type of element in the inputting sequence.</typeparam>
            <typeparam name="TResult">The type of element in the resulting sequence.</typeparam>
            <param name="items">The sequence to enumerate.</param>
            <param name="selector">The selector for each item.</param>
            <returns>An immutable array.</returns>
        </member>
        <member name="T:Wawa.Modules.ISolvable">
            <summary>
            Interface for Twitch Plays auto-solvers. Used by <see cref="T:System.Reflection.Module" /> to abstractly communicate
            with Twitch Plays solvers without importing the namespace.
            </summary>
        </member>
        <member name="P:Wawa.Modules.ISolvable.IsTP">
            <summary>Gets a value indicating whether Twitch Plays is currently active.</summary>
            <remarks><para>
            This is for modules that need to display different items, or use different rules if Twitch Plays is active.
            </para><para>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>,
            therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in
            <see cref="F:KMBombModule.OnActivate" /> or later.
            </para></remarks>
        </member>
        <member name="M:Wawa.Modules.ISolvable.ForceTPSolve">
            <summary>
            When the module runs into an exception or the module is forced to be solved, it calls this method.
            </summary>
            <remarks><para>
            Make sure that the module is solved before this method closes, otherwise it causes a forced-solve.
            </para></remarks>
            <returns>A series of instructions for the Twitch Plays mod to handle in order to guarantee a solve.</returns>
        </member>
        <member name="T:Wawa.Modules.ModdedModule">
            <summary>
            A <see cref="T:UnityEngine.Component" /> that handles general Keep Talking and Nobody Explodes modded module behaviour.
            </summary>
        </member>
        <member name="P:Wawa.Modules.ModdedModule.Status">
            <summary>Gets the current solve/strike status of the module.</summary>
        </member>
        <member name="P:Wawa.Modules.ModdedModule.Id">
            <summary>
            Gets the mod id. Override this if you are working with an assembly with a different name than your mod id.
            </summary>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.ToString">
            <inheritdoc />
        </member>
        <member name="M:Wawa.Modules.ModdedModule.Play(Wawa.Modules.Sound[])">
            <summary>Plays one or more sounds from the module <see cref="T:UnityEngine.Transform" />.</summary>
            <exception cref="T:System.InvalidOperationException">
            There isn't exactly 1 <see cref="T:KMAudio" /> <see cref="T:UnityEngine.Component" /> attached to this <see cref="T:UnityEngine.GameObject" />.
            </exception>
            <param name="sounds">The sounds to play.</param>
            <returns>The parameter <paramref name="sounds" />.</returns>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.Play(UnityEngine.Transform,Wawa.Modules.Sound[])">
            <summary>Plays one or more sounds from a specified <see cref="T:UnityEngine.Transform" />.</summary>
            <exception cref="T:System.InvalidOperationException">
            There isn't exactly 1 <see cref="T:KMAudio" /> <see cref="T:UnityEngine.Component" /> attached to this <see cref="T:UnityEngine.GameObject" />.
            </exception>
            <param name="location">The source of the sound.</param>
            <param name="sounds">The sounds to play.</param>
            <returns>The parameter <paramref name="sounds" />.</returns>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.PlayEnum``1(``0,UnityEngine.Transform)">
            <summary>Plays one or more sounds from a specified <see cref="T:UnityEngine.Transform" />.</summary>
            <typeparam name="T">The type of iterator.</typeparam>
            <exception cref="T:System.InvalidOperationException">
            There isn't exactly 1 <see cref="T:KMAudio" /> <see cref="T:UnityEngine.Component" /> attached to this <see cref="T:UnityEngine.GameObject" />.
            </exception>
            <param name="sounds">The sounds to play.</param>
            <param name="location">The source of the sound.</param>
            <returns>The parameter <paramref name="sounds" />.</returns>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.Shake(KMSelectable,System.Single,Wawa.Modules.Sound[])">
            <summary>Plays sounds and shakes the bomb from a selectable.</summary>
            <param name="selectable">The source of the interaction punch and sound source.</param>
            <param name="intensityModifier">The intensity of the interaction punch.</param>
            <param name="sounds">The sounds to play.</param>
            <returns>The parameter <paramref name="selectable" />.</returns>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.Solve(System.String,System.Object[])">
            <summary>Solves the module.</summary>
            <param name="format">The value to log.</param>
            <param name="args">The arguments to hook into format.</param>
            <returns>The value <see langword="default" />.</returns>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.Strike(System.String,System.Object[])">
            <summary>Strikes the module.</summary>
            <param name="format">The value to log.</param>
            <param name="args">The arguments to hook into format.</param>
            <returns>The value <see langword="default" />.</returns>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.Log``1(``0,UnityEngine.LogType)">
            <summary>
            Logs and formats a message to the Unity Console in a format compliant with the Logfile Analyzer.
            </summary>
            <typeparam name="T">The type of the value to log.</typeparam>
            <param name="format">The value to log.</param>
            <param name="logType">The kind of logging method to invoke.</param>
            <returns>The parameter <paramref name="format" />.</returns>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.Log``1(``0,System.Object[])">
            <summary>
            Logs and formats a message to the Unity Console in a format compliant with the Logfile Analyzer.
            </summary>
            <typeparam name="T">The type of the value to log.</typeparam>
            <param name="format">The value to log.</param>
            <param name="args">The arguments to hook into format.</param>
            <returns>The parameter <paramref name="format" />.</returns>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.LogLower``1(``0,UnityEngine.LogType)">
            <summary>
            Logs and formats a message to the Unity Console in a format not compliant with the Logfile Analyzer.
            </summary>
            <typeparam name="T">The type of the value to log.</typeparam>
            <param name="format">The value to log.</param>
            <param name="logType">The kind of logging method to invoke.</param>
            <returns>The parameter <paramref name="format" />.</returns>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.LogLower``1(``0,System.Object[])">
            <summary>
            Logs and formats a message to the Unity Console in a format not compliant with the Logfile Analyzer.
            </summary>
            <typeparam name="T">The type of the value to log.</typeparam>
            <param name="format">The value to log.</param>
            <param name="args">The arguments to hook into format.</param>
            <returns>The parameter <paramref name="format" />.</returns>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.Awake">
            <summary>Logs version numbers. Be sure to call this method if you are implementing Awake.</summary>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.OnActivate">
            <summary>The method that is called when the lights are turned on. Automatically hooked in Awake.</summary>
            <remarks><para>The base method doesn't do anything; Calling this base method is a no-op.</para></remarks>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.OnDisable">
            <summary>
            Subscribes <see cref="E:UnityEngine.Application.logMessageReceived" /> and <see cref="F:KMBombModule.OnActivate" />.
            </summary>
            <remarks><para>It is recommended to invoke the base method when overriding this method.</para></remarks>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.OnEnable">
            <summary>
            Unsubscribes <see cref="E:UnityEngine.Application.logMessageReceived" /> and <see cref="F:KMBombModule.OnActivate" />.
            </summary>
            <remarks><para>It is recommended to invoke the base method when overriding this method.</para></remarks>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.OnException(System.String)">
            <summary>
            The method that is called when an unhandled <see cref="T:System.Exception" /> is thrown by this module type.
            </summary>
            <param name="message">The message of the <see cref="T:System.Exception" />.</param>
        </member>
        <member name="T:Wawa.Modules.Sound">
            <summary>
            Encapsulates a modded or vanilla sound effect, with methods to play the sound, and allowing you to extend
            into the <see cref="T:KMAudio.KMAudioRef" /> instance that spawns from playing a sound effect.
            </summary>
            <inheritdoc cref="T:Wawa.Modules.Sound" />
        </member>
        <member name="M:Wawa.Modules.Sound.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Wawa.Modules.Sound" /> class.</summary>
            <param name="sound">The name of the modded sound to use.</param>
        </member>
        <member name="M:Wawa.Modules.Sound.#ctor(UnityEngine.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Wawa.Modules.Sound" /> class. Uses the name of the <see cref="T:UnityEngine.AudioClip" />.
            </summary>
            <param name="sound">The <see cref="T:UnityEngine.Object" /> of the modded sound to use, getting its name.</param>
        </member>
        <member name="M:Wawa.Modules.Sound.#ctor(KMSoundOverride.SoundEffect)">
            <summary>Initializes a new instance of the <see cref="T:Wawa.Modules.Sound" /> class.</summary>
            <param name="sound">The vanilla sound to use.</param>
        </member>
        <member name="P:Wawa.Modules.Sound.Modded">
            <summary>
            Gets the modded sound passed in as <see cref="T:Wawa.Optionals.Maybe`1" /> due to ambiguity in this value being set.
            </summary>
        </member>
        <member name="P:Wawa.Modules.Sound.Vanilla">
            <summary>
            Gets the vanilla sound passed in as <see cref="T:Wawa.Optionals.Maybe`1" /> due to ambiguity in this value being set.
            </summary>
        </member>
        <member name="P:Wawa.Modules.Sound.Reference">
            <summary>Gets the instance of the <see cref="T:KMAudio.KMAudioRef" /> created from playing a sound.</summary>
        </member>
        <member name="M:Wawa.Modules.Sound.op_Implicit(System.String)~Wawa.Modules.Sound">
            <summary>Implicitly calls the constructor.</summary>
            <param name="sound">The <see cref="T:System.String" /> to pass in to the constructor.</param>
        </member>
        <member name="M:Wawa.Modules.Sound.op_Explicit(UnityEngine.Object)~Wawa.Modules.Sound">
            <summary>Explicitly calls the constructor.</summary>
            <param name="sound">The <see cref="T:UnityEngine.Object" /> to pass in to the constructor.</param>
        </member>
        <member name="M:Wawa.Modules.Sound.op_Implicit(KMSoundOverride.SoundEffect)~Wawa.Modules.Sound">
            <summary>Implicitly calls the constructor.</summary>
            <param name="sound">The <see cref="T:KMSoundOverride.SoundEffect" /> to pass in to the constructor.</param>
        </member>
        <member name="M:Wawa.Modules.Sound.op_Equality(Wawa.Modules.Sound,Wawa.Modules.Sound)">
            <summary>Determines whether both instances contain the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true" /> if both instances contain the same values, otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:Wawa.Modules.Sound.op_Inequality(Wawa.Modules.Sound,Wawa.Modules.Sound)">
            <summary>Determines whether both instances do not contain the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true" /> if both instances do not contain the same values,
            otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:Wawa.Modules.Sound.FromString(System.String)">
            <summary>Converts the <see cref="T:System.String" /> to a <see langword="new" /> <see cref="T:Wawa.Modules.Sound" />.</summary>
            <param name="sound">The <see cref="T:System.String" /> instance to convert.</param>
            <returns>A <see langword="new" /> <see cref="T:Wawa.Modules.Sound" /> instance encapsulating <paramref name="sound" />.</returns>
        </member>
        <member name="M:Wawa.Modules.Sound.FromObject(UnityEngine.Object)">
            <summary>Converts the <see cref="T:UnityEngine.Object" /> to a <see langword="new" /> <see cref="T:Wawa.Modules.Sound" />.</summary>
            <param name="sound">The <see cref="T:UnityEngine.Object" /> instance to convert.</param>
            <returns>A <see langword="new" /> <see cref="T:Wawa.Modules.Sound" /> instance encapsulating <paramref name="sound" />.</returns>
        </member>
        <member name="M:Wawa.Modules.Sound.FromSoundEffect(KMSoundOverride.SoundEffect)">
            <summary>Converts the <see cref="T:KMSoundOverride.SoundEffect" /> to a <see langword="new" /> <see cref="T:Wawa.Modules.Sound" />.</summary>
            <param name="sound">The <see cref="T:KMSoundOverride.SoundEffect" /> instance to convert.</param>
            <returns>A <see langword="new" /> <see cref="T:Wawa.Modules.Sound" /> instance encapsulating <paramref name="sound" />.</returns>
        </member>
        <member name="M:Wawa.Modules.Sound.Equals(Wawa.Modules.Sound)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.Modules.Sound.Equals(Wawa.Modules.Sound,Wawa.Modules.Sound)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.Modules.Sound.GetHashCode(Wawa.Modules.Sound)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.Modules.Sound.Clone">
            <inheritdoc />
        </member>
        <member name="M:Wawa.Modules.Sound.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.Modules.Sound.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Wawa.Modules.Sound.ToString">
            <inheritdoc />
        </member>
        <member name="P:Wawa.Modules.Sound.Vanillas">
            <summary>Gets all vanilla sounds from the base game.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.AlarmClockBeep">
            <summary>Gets the sound that plays when the alarm clock goes off. This sound loops.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.AlarmClockSnooze">
            <summary>Gets the sound that plays when you hit snooze button on the alarm clock.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.BigButtonPress">
            <summary>Gets the sound that plays when pressing down the button on the Big Button vanilla module.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.BigButtonRelease">
            <summary>Gets the sound that plays when releasing the button on the Big Button vanilla module.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.BinderDrop">
            <summary>Gets the sound that plays as the mission binder hits the desk.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.BombDefused">
            <summary>
            Gets the sound that plays immediately after a bomb is defused
            and before <see cref="F:KMSoundOverride.SoundEffect.GameOverFanfare" />.
            </summary>
        </member>
        <member name="P:Wawa.Modules.Sound.BombDrop">
            <summary>Gets the sound that plays when the bomb is set down on the desk.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.BombExplode">
            <summary>Gets the sound that plays when the bomb explodes.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.BriefcaseClose">
            <summary>Gets the sound that plays when the freeplay briefcase is closed.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.BriefcaseOpen">
            <summary>Gets the sound that plays when the freeplay briefcase is opened.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.ButtonPress">
            <summary>Gets the sound that plays when pressing down a button.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.ButtonRelease">
            <summary>Gets the sound that plays when releasing a button.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.CapacitorPop">
            <summary>Gets the sound that plays when Capacitor Discharge fills up completely.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.CorrectChime">
            <summary>Gets the sound that plays in the tutorial for completing a step correctly.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.DossierOptionPressed">
            <summary>Gets the sound that plays when you change a setting in the menu folder.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.EmergencyAlarm">
            <summary>
            Gets the sound that plays when there is less than a minute left on the bomb, this sound loops.
            </summary>
        </member>
        <member name="P:Wawa.Modules.Sound.FastestTimerBeep">
            <summary>Gets the sound that plays when the bomb has at least 2 or more strikes.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.FastTimerBeep">
            <summary>Gets the sound that plays when the bomb has 1 strike.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.FreeplayDeviceDrop">
            <summary>Gets the sound that plays as the freeplay briefcase hits the desk.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.GameOverFanfare">
            <summary>Gets the sound that plays when all bombs are defused. Finishes before the post game screen.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.LightBuzz">
            <summary>Gets the sound that plays when the lights go out.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.LightBuzzShort">
            <summary>Gets the sound that plays when the lights start to come back on.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.MenuButtonPressed">
            <summary>Gets the sound that plays when you start a mission from the mission binder.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.MenuDrop">
            <summary>Gets the sound that plays as the mission folder hits the desk.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.NeedyActivated">
            <summary>Gets the sound that plays when a needy gets activated.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.NeedyWarning">
            <summary>Gets the sound that plays when a needy is running out of time. This sound loops.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.NormalTimerBeep">
            <summary>Gets the sound that plays when the bomb has no strikes.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.PageTurn">
            <summary>Gets the sound that plays when a page is turned in the Missions binder.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.SelectionTick">
            <summary>Gets the sound that plays as you hover over something interactable.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.Stamp">
            <summary>
            Gets the sound that plays during the post game screen, when either the defused
            or exploded text is stamped onto the binder.
            </summary>
        </member>
        <member name="P:Wawa.Modules.Sound.Strike">
            <summary>Gets the sound that plays when you get a strike.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.Switch">
            <summary>Gets the sound that plays when a switch is toggled.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.TitleMenuPressed">
            <summary>Gets the sound that plays when pressing a button in one of the tutorials.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.TypewriterKey">
            <summary>
            Gets the sound that plays during the post game screen as the mission information gets typed out.
            </summary>
        </member>
        <member name="P:Wawa.Modules.Sound.WireSequenceMechanism">
            <summary>Gets the sound that plays when switching between sets of wires in Wire Sequence.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.WireSnip">
            <summary>Gets the sound that plays when a wire is cut on a module like Complicated Wires.</summary>
        </member>
        <member name="T:Wawa.Modules.SoundCore">
            <summary>Implementations for <see cref="T:Wawa.Modules.Sound" />.</summary>
        </member>
        <member name="M:Wawa.Modules.SoundCore.Play(Wawa.Modules.Sound,KMAudio,UnityEngine.Transform,System.Boolean)">
            <summary>Plays the current sound that is stored.</summary>
            <param name="that">This instance of <see cref="T:Wawa.Modules.Sound" />.</param>
            <param name="audio">The <see cref="T:KMAudio" /> to play it from.</param>
            <param name="transform">The <see cref="T:UnityEngine.Transform" />, which is needed for the location of the sound.</param>
            <param name="isLooping">Indicates whether the sound should loop.</param>
            <returns>
            A <see cref="T:Wawa.Optionals.Maybe`1" />, consisting of either a <see cref="T:KMAudio.KMAudioRef" />,
            or <see langword="default" /> if <see cref="T:KMAudio" /> is unable to play a sound,
            usually caused by playing too many sounds at once.
            </returns>
        </member>
        <member name="M:Wawa.Modules.SoundCore.AsSound(System.String)">
            <summary>Creates an instance of <see cref="T:Wawa.Modules.Sound" /> where <see cref="P:Wawa.Modules.Sound.Modded" /> is set.</summary>
            <param name="sound">The <see cref="T:System.String" /> to pass in <see cref="T:Wawa.Modules.Sound" />.</param>
            <returns>A new instance of <see cref="T:Wawa.Modules.Sound" /> which encapsulates <paramref name="sound" />.</returns>
        </member>
        <member name="M:Wawa.Modules.SoundCore.AsSound(KMSoundOverride.SoundEffect)">
            <summary>Creates an instance of <see cref="T:Wawa.Modules.Sound" /> where <see cref="P:Wawa.Modules.Sound.Vanilla" /> is set.</summary>
            <param name="sound">The <see cref="T:KMSoundOverride.SoundEffect" /> to pass in <see cref="T:Wawa.Modules.Sound" />.</param>
            <returns>A new instance of <see cref="T:Wawa.Modules.Sound" /> which encapsulates <paramref name="sound" />.</returns>
        </member>
        <member name="M:Wawa.Modules.SoundCore.Stop(Wawa.Modules.Sound)">
            <summary>Gets the <see cref="P:Wawa.Modules.Sound.Reference" /> and stops the sound if it is playing.</summary>
            <param name="that">This instance of <see cref="T:Wawa.Modules.Sound" />.</param>
            <returns>The parameter <paramref name="that" />.</returns>
        </member>
        <member name="M:Wawa.Modules.SoundCore.ToSound(UnityEngine.AudioClip)">
            <summary>Creates an instance of <see cref="T:Wawa.Modules.Sound" /> where <see cref="P:Wawa.Modules.Sound.Modded" /> is set.</summary>
            <param name="sound">The <see cref="T:UnityEngine.AudioClip" /> to pass in <see cref="T:Wawa.Modules.Sound" />.</param>
            <returns>
            A new instance of <see cref="T:Wawa.Modules.Sound" /> which encapsulates the name of <paramref name="sound" />.
            </returns>
        </member>
        <member name="M:Wawa.Modules.SoundCore.ToSounds(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Creates an <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> where each element has been converted.</summary>
            <param name="sounds">The collection.</param>
            <returns>An immutable array.</returns>
        </member>
        <member name="M:Wawa.Modules.SoundCore.ToSounds(System.Collections.Generic.IEnumerable{KMSoundOverride.SoundEffect})">
            <summary>Creates an <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> where each element has been converted.</summary>
            <param name="sounds">The collection.</param>
            <returns>An immutable array.</returns>
        </member>
        <member name="M:Wawa.Modules.SoundCore.ToSounds(System.Collections.Generic.IEnumerable{UnityEngine.AudioClip})">
            <summary>Creates an <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> where each element has been converted.</summary>
            <param name="sounds">The collection.</param>
            <returns>An immutable array.</returns>
        </member>
        <member name="M:Wawa.Modules.SoundCore.Stop``1(``0)">
            <summary>
            Gets the <see cref="P:Wawa.Modules.Sound.Reference" /> of a collection of sounds and stops the sound if it is playing.
            </summary>
            <typeparam name="T">The type of iterator.</typeparam>
            <param name="sounds">The multiple <see cref="T:Wawa.Modules.Sound" /> instances to each call <see cref="M:Wawa.Modules.SoundCore.Stop(Wawa.Modules.Sound)" /> on.</param>
            <returns>The parameter <paramref name="sounds" />.</returns>
        </member>
        <member name="M:Wawa.Modules.SoundCore.Play(System.Collections.Generic.IEnumerable{Wawa.Modules.Sound},KMAudio,UnityEngine.Transform,System.Boolean)">
            <summary>Plays the current sound that is stored.</summary>
            <param name="that">This instance of <see cref="T:Wawa.Modules.Sound" />.</param>
            <param name="audio">The <see cref="T:KMAudio" /> to play it from.</param>
            <param name="transform">The <see cref="T:UnityEngine.Transform" />, which is needed for the location of the sound.</param>
            <param name="isLooping">Indicates whether the sound should loop.</param>
            <returns>
            A <see cref="T:Wawa.Optionals.Maybe`1" />, consisting of either a <see cref="T:KMAudio.KMAudioRef" />,
            or <see langword="default" /> if <see cref="T:KMAudio" /> is unable to play a sound,
            usually caused by playing too many sounds at once.
            </returns>
        </member>
        <member name="T:Wawa.Modules.State">
            <summary>Encapsulation of status conditions for a <see cref="T:Wawa.Modules.ModdedModule" />.</summary>
        </member>
        <member name="M:Wawa.Modules.State.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Wawa.Modules.State" /> class.</summary>
            <param name="name">
            The <see cref="T:System.String" /> containing the module id which is used to assign <see cref="P:Wawa.Modules.State.Id" />.
            </param>
        </member>
        <member name="P:Wawa.Modules.State.HasStruck">
            <summary>
            Gets or sets a value indicating whether the module has ever called <see cref="M:Wawa.Modules.ModdedModule.Strike(System.String,System.Object[])" />.
            </summary>
        </member>
        <member name="P:Wawa.Modules.State.IsSolved">
            <summary>Gets a value indicating whether the module is solved.</summary>
        </member>
        <member name="P:Wawa.Modules.State.Id">
            <summary>Gets the unique module id of this module type, primarily used in logging.</summary>
        </member>
        <member name="P:Wawa.Modules.State.HasException">
            <summary>
            Gets or sets a value indicating whether the module has thrown an unhandled <see cref="T:System.Exception" />.
            </summary>
        </member>
        <member name="P:Wawa.Modules.State.Strikes">
            <summary>Gets or sets the amount of times <see cref="M:Wawa.Modules.ModdedModule.Strike(System.String,System.Object[])" /> was called.</summary>
        </member>
        <member name="M:Wawa.Modules.State.op_Equality(Wawa.Modules.State,Wawa.Modules.State)">
            <summary>Determines whether both instances contain the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true" /> if both instances contain the same values, otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:Wawa.Modules.State.op_Inequality(Wawa.Modules.State,Wawa.Modules.State)">
            <summary>Determines whether both instances do not contain the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true" /> if both instances do not contain the same values,
            otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:Wawa.Modules.State.Equals(Wawa.Modules.State)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.Modules.State.Equals(Wawa.Modules.State,Wawa.Modules.State)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.Modules.State.GetHashCode(Wawa.Modules.State)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.Modules.State.Clone">
            <inheritdoc />
        </member>
        <member name="M:Wawa.Modules.State.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.Modules.State.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Wawa.Modules.State.ToString">
            <inheritdoc />
        </member>
        <member name="T:Wawa.Modules.Stringifier">
            <summary>Provides stringification methods.</summary>
        </member>
        <member name="M:Wawa.Modules.Stringifier.Conjoin``1(System.Collections.Generic.IEnumerable{``0},System.Char)">
            <summary>Joins a set of values into one long <see cref="T:System.String" />.</summary>
            <remarks><para>
            This method is more efficient than using
            <see cref="M:Wawa.Modules.Stringifier.Conjoin``1(System.Collections.Generic.IEnumerable{``0},System.String)" /> for <see cref="T:System.Char" /> separators.
            </para></remarks>
            <typeparam name="T">The type of each item in the collection.</typeparam>
            <param name="values">The values to join.</param>
            <param name="separator">The separator between each item.</param>
            <returns>One long <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:Wawa.Modules.Stringifier.Conjoin``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>Joins a set of values into one long <see cref="T:System.String" />.</summary>
            <typeparam name="T">The type of each item in the collection.</typeparam>
            <param name="values">The values to join.</param>
            <param name="separator">The separator between each item.</param>
            <returns>One long <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:Wawa.Modules.Stringifier.Nth(System.Int32,System.Boolean)">
            <summary>Converts a number to an ordinal.</summary>
            <param name="i">The number to convert.</param>
            <param name="indexByZero">Determines whether to index from zero or one.</param>
            <returns>The parameter <paramref name="i" /> as an ordinal.</returns>
        </member>
        <member name="M:Wawa.Modules.Stringifier.Stringify``1(``0)">
            <summary>
            Converts <paramref name="source" /> into a <see cref="T:System.String" /> representation of <paramref name="source" />.
            <p /><c>[MustUseReturnValue]</c></summary>
            <remarks><para>
            Unlike <see cref="M:System.Object.ToString" />, the values of all properties are printed out,
            unless they explicitly define a <see cref="M:System.Object.ToString" />, or inherit <see cref="T:System.Collections.IEnumerable" />,
            in which case each item within is printed out separately.
            </para></remarks>
            <typeparam name="T">The type of the source.</typeparam>
            <param name="source">The item to get a <see cref="T:System.String" /> representation of.</param>
            <returns><paramref name="source" /> as <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:Wawa.Modules.Stringifier.Stringify``1(``0,System.Boolean,System.Boolean)">
            <summary>
            Converts <paramref name="source" /> into a <see cref="T:System.String" /> representation of <paramref name="source" />.
            <p /><c>[MustUseReturnValue]</c></summary>
            <remarks><para>
            Unlike <see cref="M:System.Object.ToString" />, the values of all properties are printed out,
            unless they explicitly define a <see cref="M:System.Object.ToString" />, or inherit <see cref="T:System.Collections.IEnumerable" />,
            in which case each item within is printed out separately.
            </para></remarks>
            <typeparam name="T">The type of the source.</typeparam>
            <param name="source">The item to get a <see cref="T:System.String" /> representation of.</param>
            <param name="isSurrounded">
            Determines whether <see cref="T:System.String" /> and <see cref="T:System.Char" /> have a " and ' surrounding them.
            </param>
            <param name="isRecursive">
            Determines whether it re-calls <see cref="M:Wawa.Modules.Stringifier.Stringify``1(``0,System.Boolean,System.Boolean)" />
            on each property in <paramref name="source" />.
            </param>
            <returns><paramref name="source" /> as <see cref="T:System.String" />.</returns>
        </member>
    </members>
</doc>
