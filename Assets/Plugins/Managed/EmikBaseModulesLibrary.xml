<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EmikBaseModulesLibrary</name>
    </assembly>
    <members>
        <member name="T:EmikBaseModules.ColorHelper">
            <summary>
            Allows you to modify colors' individual RGBA components relatively and absolutely. Written by Emik.
            </summary>
        </member>
        <member name="M:EmikBaseModules.ColorHelper.Replace(UnityEngine.Color32,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Duplicates the color, and replaces the RGBA components only if they are specified.
            </summary>
            <param name="color">The color to duplicate and modify.</param>
            <param name="r">The red component.</param>
            <param name="g">The blue component.</param>
            <param name="b">The green component.</param>
            <param name="a">The alpha component; opacity.</param>
            <returns>A new instance of the color, with the arguments replacing the values.</returns>
        </member>
        <member name="M:EmikBaseModules.ColorHelper.Replace(UnityEngine.Color32,System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Byte})">
            <summary>
            Duplicates the color, and replaces the RGBA components only if they are specified.
            </summary>
            <param name="color">The color to duplicate and modify.</param>
            <param name="r">The red component.</param>
            <param name="g">The blue component.</param>
            <param name="b">The green component.</param>
            <param name="a">The alpha component; opacity.</param>
            <returns>A new instance of the color, with the arguments replacing the values.</returns>
        </member>
        <member name="M:EmikBaseModules.ColorHelper.Replace(UnityEngine.Color,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Duplicates the color, and replaces the RGBA components only if they are specified.
            </summary>
            <param name="color">The color to duplicate and modify.</param>
            <param name="r">The red component.</param>
            <param name="g">The blue component.</param>
            <param name="b">The green component.</param>
            <param name="a">The alpha component; opacity.</param>
            <returns>A new instance of the color, with the arguments replacing the values.</returns>
        </member>
        <member name="M:EmikBaseModules.ColorHelper.Replace(UnityEngine.Color,System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Byte})">
            <summary>
            Duplicates the color, and replaces the RGBA components only if they are specified.
            </summary>
            <param name="color">The color to duplicate and modify.</param>
            <param name="r">The red component.</param>
            <param name="g">The blue component.</param>
            <param name="b">The green component.</param>
            <param name="a">The alpha component; opacity.</param>
            <returns>A new instance of the color, with the arguments replacing the values.</returns>
        </member>
        <member name="M:EmikBaseModules.ColorHelper.Add(UnityEngine.Color32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Duplicates the color, and adds the RGBA components only if they are specified.
            </summary>
            <remarks>
            You can also use negative numbers to subtract. As this is <see cref="T:UnityEngine.Color32"/>, be careful of byte underflows/overflows.
            </remarks>
            <param name="color">The color to duplicate and modify.</param>
            <param name="r">The red component.</param>
            <param name="g">The blue component.</param>
            <param name="b">The green component.</param>
            <param name="a">The alpha component; opacity.</param>
            <returns>A new instance of the color, with the arguments replacing the values.</returns>
        </member>
        <member name="M:EmikBaseModules.ColorHelper.Add(UnityEngine.Color32,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Duplicates the color, and adds the RGBA components only if they are specified.
            </summary>
            <remarks>
            You can also use negative numbers to subtract. As this is <see cref="T:UnityEngine.Color32"/>, be careful of byte underflows/overflows.
            </remarks>
            <param name="color">The color to duplicate and modify.</param>
            <param name="r">The red component.</param>
            <param name="g">The blue component.</param>
            <param name="b">The green component.</param>
            <param name="a">The alpha component; opacity.</param>
            <returns>A new instance of the color, with the arguments replacing the values.</returns>
        </member>
        <member name="M:EmikBaseModules.ColorHelper.Add(UnityEngine.Color,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Duplicates the color, and adds the RGBA components only if they are specified.
            </summary>
            <remarks>
            You can also use negative numbers to subtract.
            </remarks>
            <param name="color">The color to duplicate and modify.</param>
            <param name="r">The red component.</param>
            <param name="g">The blue component.</param>
            <param name="b">The green component.</param>
            <param name="a">The alpha component; opacity.</param>
            <returns>A new instance of the color, with the arguments replacing the values.</returns>
        </member>
        <member name="M:EmikBaseModules.ColorHelper.Add(UnityEngine.Color,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Duplicates the color, and adds the RGBA components only if they are specified.
            </summary>
            <remarks>
            You can also use negative numbers to subtract.
            </remarks>
            <param name="color">The color to duplicate and modify.</param>
            <param name="r">The red component.</param>
            <param name="g">The blue component.</param>
            <param name="b">The green component.</param>
            <param name="a">The alpha component; opacity.</param>
            <returns>A new instance of the color, with the arguments replacing the values.</returns>
        </member>
        <member name="M:EmikBaseModules.ColorHelper.IntertwineColor(UnityEngine.Renderer,UnityEngine.Color32,UnityEngine.Color32,System.Single)">
            <summary>
            Sets the renderer's material color to be a mix of 2 colors.
            </summary>
            <param name="renderer">The renderer to change the color of.</param>
            <param name="colorA">The first color, with 0 <paramref name="concentrationOfB"/> being biased towards this color.</param>
            <param name="colorB">The second color, with 1 <paramref name="concentrationOfB"/> being biased towards this color.</param>
            <param name="concentrationOfB">The bias towards either color, between 0-1. 0.5 blends both colors equally.</param>
        </member>
        <member name="M:EmikBaseModules.ColorHelper.IntertwineColor(UnityEngine.Renderer,UnityEngine.Color,UnityEngine.Color,System.Single)">
            <summary>
            Sets the renderer's material color to be a mix of 2 colors.
            </summary>
            <param name="renderer">The renderer to change the color of.</param>
            <param name="colorA">The first color, with 0 <paramref name="concentrationOfB"/> being biased towards this color.</param>
            <param name="colorB">The second color, with 1 <paramref name="concentrationOfB"/> being biased towards this color.</param>
            <param name="concentrationOfB">The bias towards either color, between 0-1. 0.5 blends both colors equally.</param>
        </member>
        <member name="M:EmikBaseModules.ColorHelper.IntertwineColor(UnityEngine.Color32,UnityEngine.Color32,System.Single)">
            <summary>
            Creates an in-between color between 2 different colors.
            </summary>
            <param name="colorA">The first color, with 0 <paramref name="concentrationOfB"/> being biased towards this color.</param>
            <param name="colorB">The second color, with 1 <paramref name="concentrationOfB"/> being biased towards this color.</param>
            <param name="concentrationOfB">The bias towards either color, between 0-1. 0.5 blends both colors equally.</param>
            <returns>A blended color of the 2 provided.</returns>
        </member>
        <member name="M:EmikBaseModules.ColorHelper.IntertwineColor(UnityEngine.Color,UnityEngine.Color,System.Single)">
            <summary>
            Creates an in-between color between 2 different colors.
            </summary>
            <param name="colorA">The first color, with 0 <paramref name="concentrationOfB"/> being biased towards this color.</param>
            <param name="colorB">The second color, with 1 <paramref name="concentrationOfB"/> being biased towards this color.</param>
            <param name="concentrationOfB">The bias towards either color, between 0-1. 0.5 blends both colors equally.</param>
            <returns>A blended color of the 2 provided.</returns>
        </member>
        <member name="M:EmikBaseModules.ColorHelper.IsEqual(UnityEngine.Color32,UnityEngine.Color32)">
            <summary>
            Checks if both colors have the same RGBA values.
            </summary>
            <param name="colorA">The first color.</param>
            <param name="colorB">The second color.</param>
            <returns>Boolean, true only if both colors have the same R, G, B, and A values.</returns>
        </member>
        <member name="M:EmikBaseModules.ColorHelper.IsEqual(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Checks if both colors have the same RGBA values.
            </summary>
            <param name="colorA">The first color.</param>
            <param name="colorB">The second color.</param>
            <returns>Boolean, true only if both colors have the same R, G, B, and A values.</returns>
        </member>
        <member name="M:EmikBaseModules.ColorHelper.IsAnyEqual(UnityEngine.Color32[],UnityEngine.Color32)">
            <summary>
            Checks if any elements in the array <paramref name="colors"/> are equal to <paramref name="color"/>.
            </summary>
            <param name="colors">The array of colors to compare to <paramref name="color"/>.</param>
            <param name="color">The color to compare it to.</param>
            <returns>Boolean, true only if any color in <paramref name="colors"/> is the exact same as <paramref name="color"/>'s R, G, B, and A values.</returns>
        </member>
        <member name="M:EmikBaseModules.ColorHelper.IsAnyEqual(UnityEngine.Color[],UnityEngine.Color)">
            <summary>
            Checks if any elements in the array <paramref name="colors"/> are equal to <paramref name="color"/>.
            </summary>
            <param name="colors">The array of colors to compare to <paramref name="color"/>.</param>
            <param name="color">The color to compare it to.</param>
            <returns>Boolean, true only if any color in <paramref name="colors"/> is the exact same as <paramref name="color"/>'s R, G, B, and A values.</returns>
        </member>
        <member name="T:EmikBaseModules.EventHelper">
            <summary>
            KMFramework extension methods that makes it easier to assign multiple events to a variable in one statement. Written by Emik.
            </summary>
        </member>
        <member name="M:EmikBaseModules.EventHelper.Assign(KMSelectable[],System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32})">
            <summary>
            Assigns events specified into <paramref name="kmSelectable"/>. The number passed into each method represents the index that came from the array.
            </summary>
            <remarks>
            An event that is null will be skipped. This extension method simplifies all of the KMFramework events into Actions.
            </remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <param name="kmSelectable">The <see cref="T:KMSelectable"/> array to add events to.</param>
            <param name="onCancel">Called when player backs out of this selectable. Return true will make it act as a module/submodule, and false as a button.</param>
            <param name="onInteract">Called when player interacts with the selctable. Return true will make it act as a module/submodule, and false as a button.</param>
            <param name="onDefocus">Called when a different selectable becomes the focus, or the module has been backed out of.</param>
            <param name="onDeselect">Called when the selectable stops being the current selectable.</param>
            <param name="onFocus">Called when a module is focused, this is when it is interacted with from the bomb face level and its children can be selected.</param>
            <param name="onHighlight">Called when the highlight is turned on. This will not work correctly in Virtual Reality.</param>
            <param name="onHighlightEnded">Called when the highlight is turned off. This will not work correctly in Virtual Reality.</param>
            <param name="onInteractEnded">Called when a player interacting with the selectable releases the mouse or controller button.</param>
            <param name="onLeft">Called when the left controller stick is pulled while selected.</param>
            <param name="onRight">Called when the right controller stick is pulled while selected.</param>
            <param name="onSelect">Called whenever the selectable becomes the current selectable.</param>
        </member>
        <member name="M:EmikBaseModules.EventHelper.Assign(KMSelectable,System.Action,System.Action,System.Action,System.Action,System.Action,System.Action,System.Action,System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Assigns events specified into <paramref name="kmSelectable"/>.
            </summary>
            <remarks>
            An event that is null will be skipped. This extension method simplifies all of the KMFramework events into Actions.
            </remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <param name="kmSelectable">The KMSelectable array to add events to.</param>
            <param name="onCancel">Called when player backs out of this selectable. Return true will make it act as a module/submodule, and false as a button.</param>
            <param name="onInteract">Called when player interacts with the selctable. Return true will make it act as a module/submodule, and false as a button.</param>
            <param name="onDefocus">Called when a different selectable becomes the focus, or the module has been backed out of.</param>
            <param name="onDeselect">Called when the selectable stops being the current selectable.</param>
            <param name="onFocus">Called when a module is focused, this is when it is interacted with from the bomb face level and its children can be selected.</param>
            <param name="onHighlight">Called when the highlight is turned on. This will not work correctly in Virtual Reality.</param>
            <param name="onHighlightEnded">Called when the highlight is turned off. This will not work correctly in Virtual Reality.</param>
            <param name="onInteractEnded">Called when a player interacting with the selectable releases the mouse or controller button.</param>
            <param name="onLeft">Called when the left controller stick is pulled while selected.</param>
            <param name="onRight">Called when the right controller stick is pulled while selected.</param>
            <param name="onSelect">Called whenever the selectable becomes the current selectable.</param>
        </member>
        <member name="M:EmikBaseModules.EventHelper.Assign(KMNeedyModule,EmikBaseModules.ModuleScript,System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Assigns events specified into <paramref name="kmNeedyModule"/>.
            </summary>
            <remarks>
            An event that is null will be skipped. This extension method simplifies all of the KMFramework events into Actions.
            </remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <param name="kmNeedyModule">The needy module to assign events to.</param>
            <param name="moduleScript">An instance of <see cref="T:EmikBaseModules.ModuleScript"/>, which transmutates the <see cref="P:EmikBaseModules.ModuleScript.IsNeedyActive"/> property.</param>
            <param name="onActivate">Called when the bomb has been activated and the timer has started.</param>
            <param name="onNeedyActivation">Called when the needy timer activates.</param>
            <param name="onNeedyDeactivation">Called when the needy gets solved or the bomb explodes.</param>
            <param name="onTimerExpired">Called when the timer of the needy runs out.</param>
        </member>
        <member name="M:EmikBaseModules.EventHelper.Assign(KMGameInfo,System.Action{System.Boolean},System.Action{System.Boolean})">
            <summary>
            Assigns events specified into <paramref name="kmGameInfo"/>.
            </summary>
            <remarks>
            An event that is null will be skipped. This extension method simplifies all of the KMFramework events into Actions.
            </remarks>
            <param name="kmGameInfo">The game info instance to assign events to.</param>
            <param name="onAlarmClockChange">Called when the alarm clock changes state, and passes in whether it's on or off.</param>
            <param name="onLightsChange">Called when the lights change state, and passes in whether it's on or off.</param>
        </member>
        <member name="M:EmikBaseModules.EventHelper.Assign(KMBombInfo,System.Action,System.Action)">
            <summary>
            Assigns events specified into <paramref name="kmBombInfo"/>.
            </summary>
            <remarks>
            An event that is null will be skipped. This extension method simplifies all of the KMFramework events into Actions or Functions.
            </remarks>
            <param name="kmBombInfo">The bomb info instance to assign events to.</param>
            <param name="onBombExploded">Called when the bomb explodes.</param>
            <param name="onBombSolved">Called when the bomb is defused.</param>
        </member>
        <member name="M:EmikBaseModules.EventHelper.Assign(KMBombModule,EmikBaseModules.ModuleScript,System.Action)">
            <summary>
            Assigns events specified into <paramref name="kmBombModule"/>.
            </summary>
            <remarks>
            Each parameter must be set. This extension method simplifies all of the KMFramework events into Actions.
            </remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <param name="kmBombModule">The bomb module instance to assign events to.</param>
            <param name="moduleScript">An instance of <see cref="T:EmikBaseModules.ModuleScript"/>, which transmutates the <see cref="P:EmikBaseModules.ModuleScript.IsActive"/> property.</param>
            <param name="onActivate">Called when the bomb has been activated and the timer has started.</param>
        </member>
        <member name="T:EmikBaseModules.Helper">
            <summary>
            General extension class covering both KMFramework and native datatypes. Written by Emik.
            </summary>
        </member>
        <member name="P:EmikBaseModules.Helper.Alphanumeric">
            <value>
            The entire alphanumeric series, also known as base-62. From 0-9, A-Z, a-z.
            </value>
        </member>
        <member name="M:EmikBaseModules.Helper.Play(KMAudio,UnityEngine.Transform,System.Object[])">
            <summary>
            Plays a sound in-game.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
            <param name="audio">An instance of <see cref="T:KMAudio"/> is needed to play a sound.</param>
            <param name="transform">The location or sound source of the sound.</param>
            <param name="sounds">The sounds, these can either be <see cref="T:System.String"/> or <see cref="T:KMSoundOverride.SoundEffect"/>. Any other type will throw an exception.</param>
        </member>
        <member name="M:EmikBaseModules.Helper.Push(KMSelectable,KMAudio,System.Single,System.Object[])">
            <summary>
            Handles typical button <see cref="F:KMSelectable.OnInteract"/> behaviour.
            </summary>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
            <param name="selectable">The selectable, which is used as a source for sound and bomb shake.</param>
            <param name="audio">An instance of <see cref="T:KMAudio"/> is needed to play a sound.</param>
            <param name="intensityModifier">The intensity of the bomb shaking.</param>
            <param name="sounds">The sounds, these can either be <see cref="T:System.String"/> or <see cref="T:KMSoundOverride.SoundEffect"/>. Any other type will throw an exception.</param>
        </member>
        <member name="M:EmikBaseModules.Helper.ToNumbers``1(``0[],System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Parses each element of an array into a number. If it succeeds it returns the integer array, if it fails then it returns null.
            </summary>
            <param name="ts">The array to convert to an integer.</param>
            <param name="min">The minimum acceptable value of any given index. (inclusive)</param>
            <param name="max">The maximum acceptable value of any given index. (inclusive)</param>
            <param name="minLength">The minimum acceptable length of the array. (inclusive)</param>
            <param name="maxLength">The maximum acceptable length of the array. (inclusive)</param>
            <returns>The array as integers, or null if it fails.</returns>
        </member>
        <member name="M:EmikBaseModules.Helper.Base(System.Int32,System.Char[])">
            <summary>
            Converts a base-10 number to any base.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="baseChars">All of the base characters, use <see cref="P:EmikBaseModules.Helper.Alphanumeric"/> for Base-62. The length of the array is the base number.</param>
            <returns>The integer, but in the base specified.</returns>
        </member>
        <member name="M:EmikBaseModules.Helper.Append``1(``0[],``0)">
            <summary>
            Appends the element provided to the array.
            </summary>
            <typeparam name="T">The datatype of both the array and element.</typeparam>
            <param name="array">The array to be appended with.</param>
            <param name="item">The element to append to the <paramref name="array"/>.</param>
            <returns><paramref name="array"/>, but with an added <paramref name="item"/> as the last index.</returns>
        </member>
        <member name="M:EmikBaseModules.Helper.Prepend``1(``0[],``0)">
            <summary>
            Prepends the element provided to the array.
            </summary>
            <typeparam name="T">The datatype of both the array and element.</typeparam>
            <param name="array">The array to be appended with.</param>
            <param name="item">The element to append to the <paramref name="array"/>.</param>
            <returns><paramref name="array"/>, but with an added <paramref name="item"/> as the first index.</returns>
        </member>
        <member name="M:EmikBaseModules.Helper.IsParent(KMSelectable)">
            <summary>
            Determines if the <see cref="T:KMSelectable"/> is a parent of another <see cref="T:KMSelectable"/>.
            </summary>
            <param name="kmSelectable">This is required to check the children field.</param>
            <returns>True if <see cref="F:KMSelectable.Children"/> is empty.</returns>
        </member>
        <member name="M:EmikBaseModules.Helper.IsIndexNull(System.Object[],System.Int32)">
            <summary>
            Determines if the index is pointing to null in any way.
            </summary>
            <param name="array">The array to index with.</param>
            <param name="index">The index.</param>
            <returns>True if <paramref name="array"/> is null, if <paramref name="index"/> is out of range, or if the element is null.</returns>
        </member>
        <member name="M:EmikBaseModules.Helper.IsNullOrEmpty(System.String)">
            <summary>
            Determines if the string is null or empty.
            </summary>
            <param name="str">The string to check for.</param>
            <returns>True if string is equal to null, or empty.</returns>
        </member>
        <member name="M:EmikBaseModules.Helper.IsNullOrEmpty(System.Array)">
            <summary>
            Determines if the array is null or empty.
            </summary>
            <param name="array">The array to check for.</param>
            <returns>True if the array is equal to null, or empty.</returns>
        </member>
        <member name="M:EmikBaseModules.Helper.RandomBoolean(System.Single)">
            <summary>
            Generates a random boolean.
            </summary>
            <remarks>
            As this uses <see cref="T:UnityEngine.Random"/>, you may not use this in a constructor. Use it in <c>Awake()</c> or <c>Start()</c> in that case.
            </remarks>
            <param name="weighting">The odds of the boolean being true.</param>
            <returns>A random boolean, with probability based off of <paramref name="weighting"/>.</returns>
        </member>
        <member name="M:EmikBaseModules.Helper.RandomBooleans(System.Int32,System.Single)">
            <summary>
            Generates a random set of booleans.
            </summary>
            <remarks>
            As this uses <see cref="T:UnityEngine.Random"/>, you may not use this in a constructor. Use it in <c>Awake()</c> or <c>Start()</c> in that case.
            </remarks>
            <param name="length">The length of the array.</param>
            <param name="weighting">The odds of the boolean being true.</param>
            <returns>Random boolean array of length <paramref name="length"/>, with probability based off of <paramref name="weighting"/>.</returns>
        </member>
        <member name="M:EmikBaseModules.Helper.ToLower(System.Char)">
            <summary>
            Converts a character to lowercase.
            </summary>
            <param name="source">The character to convert.</param>
            <returns><paramref name="source"/> as lowercase.</returns>
        </member>
        <member name="M:EmikBaseModules.Helper.ToUpper(System.Char)">
            <summary>
            Converts a character to uppercase.
            </summary>
            <param name="source">The character to convert.</param>
            <returns><paramref name="source"/> as uppercase.</returns>
        </member>
        <member name="M:EmikBaseModules.Helper.LengthOrDefault(System.Array)">
            <summary>
            Returns the length of the array, or if null, the default value 0.
            </summary>
            <param name="array">The array to check its length.</param>
            <returns><paramref name="array"/>'s length, or 0.</returns>
        </member>
        <member name="M:EmikBaseModules.Helper.Ranges(System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates a random set of integers.
            </summary>
            <remarks>
            As this uses <see cref="T:UnityEngine.Random"/>, you may not use this in a constructor. Use it in <c>Awake()</c> or <c>Start()</c> in that case.
            </remarks>
            <param name="min">The minimum value for each index. (inclusive)</param>
            <param name="max">The maximum value for each index. (exclusive)</param>
            <param name="length">The length of the array.</param>
            <returns>Random integer array of length <paramref name="length"/> between <paramref name="min"/> and <paramref name="max"/>.</returns>
        </member>
        <member name="M:EmikBaseModules.Helper.Ranges(System.Single,System.Single,System.Int32)">
            <summary>
            Generates a random set of floats.
            </summary>
            <remarks>
            As this uses <see cref="T:UnityEngine.Random"/>, you may not use this in a constructor. Use it in <c>Awake()</c> or <c>Start()</c> in that case.
            </remarks>
            <param name="min">The minimum value for each index. (inclusive)</param>
            <param name="max">The maximum value for each index. (inclusive)</param>
            <param name="length">The length of the array.</param>
            <returns>Random float array of length <paramref name="length"/> between <paramref name="min"/> and <paramref name="max"/>.</returns>
        </member>
        <member name="M:EmikBaseModules.Helper.Base(System.Int32,System.Int32)">
            <summary>
            Converts a base-10 number to any base.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="baseNumber">Which base to convert it to.</param>
            <returns>The integer, but in the base specified.</returns>
        </member>
        <member name="M:EmikBaseModules.Helper.Form(System.String,System.Object[])">
            <summary>
            Formats the string. Shorthand for <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>.
            </summary>
            <param name="str">The string to format. Typically with placeholders involving {0}, {1}, {2}...</param>
            <param name="args">All of the arguments to put into <paramref name="str"/>.</param>
            <returns></returns>
        </member>
        <member name="M:EmikBaseModules.Helper.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Appends the element provided to the IEnumerable.
            </summary>
            <typeparam name="T">The datatype of both the IEnumerable and element.</typeparam>
            <param name="source">The IEnumerable to be modified.</param>
            <param name="item">The element to append to the <paramref name="source"/>.</param>
            <returns><paramref name="source"/>, but with an added <paramref name="item"/> as the last index.</returns>
        </member>
        <member name="M:EmikBaseModules.Helper.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Prepends the element provided to the IEnumerable.
            </summary>
            <typeparam name="T">The datatype of both the IEnumerable.</typeparam>
            <param name="source">The IEnumerable to be modified.</param>
            <param name="item">The element to append to the <paramref name="source"/>.</param>
            <returns><paramref name="source"/>, but with an added <paramref name="item"/> as the first index.</returns>
        </member>
        <member name="M:EmikBaseModules.Helper.Include``1(System.Collections.Generic.IEnumerable{``0},System.Int32[])">
            <summary>
            Removes the elements whose index does not match any of the indices.
            </summary>
            <typeparam name="T">The datatype of both the IEnumerable.</typeparam>
            <param name="source">The IEnumerable to be modified.</param>
            <param name="indices">The indices to include in <paramref name="source"/>.</param>
            <returns><paramref name="source"/>, but without the element indexing <paramref name="indices"/>.</returns>
        </member>
        <member name="M:EmikBaseModules.Helper.Exclude``1(System.Collections.Generic.IEnumerable{``0},System.Int32[])">
            <summary>
            Removes the elements whose index matches any of the indices.
            </summary>
            <typeparam name="T">The datatype of both the IEnumerable.</typeparam>
            <param name="source">The IEnumerable to be modified.</param>
            <param name="indices">The indices to exclude from <paramref name="source"/>.</param>
            <returns><paramref name="source"/>, but without the element indexing <paramref name="indices"/>.</returns>
        </member>
        <member name="M:EmikBaseModules.Helper.CacheComponent``1(UnityEngine.MonoBehaviour,``0@)">
            <summary>
            Returns <paramref name="t"/> if it isn't null, otherwise it gets the component and caches it.
            </summary>
            <typeparam name="T">The component to find.</typeparam>
            <param name="monobehaviour"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:EmikBaseModules.Helper.ElementAtWrap``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns the element of an array, pretending that the array wraps around or is circular.
            </summary>
            <typeparam name="T">The type of the array.</typeparam>
            <param name="source">The array itself.</param>
            <param name="i">The index, which will wrap around if it's larger than the array.</param>
            <returns></returns>
        </member>
        <member name="M:EmikBaseModules.Helper.EnumAsArray``1">
            <summary>
            Returns all elements of an enum as one array, in order.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <returns>The enum as an array, ordered by smallest value to largest.</returns>
        </member>
        <member name="T:EmikBaseModules.ModuleScript">
            <summary>
            Base class for regular and needy modded modules in Keep Talking and Nobody Explodes. Written by Emik.
            </summary>
        </member>
        <member name="M:EmikBaseModules.ModuleScript.OnTimerTick">
            <summary>
            Called when the timer's seconds-digit changes.
            </summary>
        </member>
        <member name="F:EmikBaseModules.ModuleScript.ModBundleName">
            <value>
            The name of the bundle. This is required for the version number.
            </value>
        </member>
        <member name="P:EmikBaseModules.ModuleScript.IsActive">
            <value>
            Determines whether the bomb is currently active, and the timer is ticking.
            </value>
        </member>
        <member name="P:EmikBaseModules.ModuleScript.IsEditor">
            <value>
            Determines whether it is running on Unity or in-game.
            </value>
        </member>
        <member name="P:EmikBaseModules.ModuleScript.IsSolved">
            <value>
            Determines if the module has been solved.
            </value>
        </member>
        <member name="P:EmikBaseModules.ModuleScript.IsStrike">
            <value>
            Determines if the module has been struck. Twitch Plays script will set this to false when a command is interrupted.
            </value>
        </member>
        <member name="P:EmikBaseModules.ModuleScript.IsNeedyActive">
            <value>
            Determines if the needy is active.
            </value>
        </member>
        <member name="P:EmikBaseModules.ModuleScript.ModuleIdCounter">
            <value>
            A counter shared across all instances of modules that inherit from this class. Allows each instance to have a different number.
            </value>
        </member>
        <member name="P:EmikBaseModules.ModuleScript.ModuleId">
            <value>
            The Unique Id for this module, within the realm of modules that use this assembly.
            </value>
        </member>
        <member name="P:EmikBaseModules.ModuleScript.TimeLeft">
            <value>
            The amount of time left on the bomb, in seconds, rounded down.
            </value>
        </member>
        <member name="P:EmikBaseModules.ModuleScript.ModuleName">
            <value>
            The module's name, by first checking for a <see cref="T:KMBombModule"/> component, then a <see cref="T:KMNeedyModule"/> component.
            </value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:EmikBaseModules.ModuleScript.Version">
            <value>
            The version number of the entire mod. Requires instance of <see cref="F:EmikBaseModules.ModuleScript.ModBundleName"/>.
            </value>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
        </member>
        <member name="F:EmikBaseModules.ModuleScript.TwitchPlaysActive">
            <value>
            These values are set by the Twitch Plays mod using reflection.
            </value>
        </member>
        <member name="F:EmikBaseModules.ModuleScript.TimeModeActive">
            <value>
            These values are set by the Twitch Plays mod using reflection.
            </value>
        </member>
        <member name="F:EmikBaseModules.ModuleScript.ZenModeActive">
            <value>
            These values are set by the Twitch Plays mod using reflection.
            </value>
        </member>
        <member name="M:EmikBaseModules.ModuleScript.Get``1(System.Boolean)">
            <summary>
            Similar to GetComponent, however it caches the result in a dictionary, and will return the cached result if called again.
            </summary>
            <remarks>
            Use this in-place of public fields that refer to itself.
            </remarks>
            <exception cref="T:System.NullReferenceException"></exception>
            <typeparam name="T">The type of component to search for.</typeparam>
            <param name="allowNull">Whether it should throw an exception if it sees null, if not it will return the default value. (Likely null)</param>
            <returns>The component specified by <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:EmikBaseModules.ModuleScript.GetAll``1(System.Boolean)">
            <summary>
            Similar to GetComponents, however it caches the result in a dictionary, and will return the cached result if called again.
            </summary>
            <remarks>
            Use this in-place of public fields that refer to itself.
            </remarks>
            <exception cref="T:System.NullReferenceException"></exception>
            <typeparam name="T">The type of component to search for.</typeparam>
            <param name="allowNull">Whether it should throw an exception if it sees null, if not it will return the default value. (Likely null)</param>
            <returns>The component specified by <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:EmikBaseModules.ModuleScript.Solve(System.String[])">
            <summary>
            Solves the module, and logs all of the parameters.
            </summary>
            <param name="logs">All of the entries to log.</param>
        </member>
        <member name="M:EmikBaseModules.ModuleScript.Strike(System.String[])">
            <summary>
            Strikes the module, and logs all of the parameters.
            </summary>
            <param name="logs">All of the entries to log.</param>
        </member>
        <member name="M:EmikBaseModules.ModuleScript.Log(System.Object,UnityEngine.LogType)">
            <summary>
            Logs message, but formats it to be compliant with the Logfile Analyzer.
            </summary>
            <param name="message">The message to log.</param>
            <param name="logType">The type of logging. Different logging types have different icons within the editor.</param>
        </member>
        <member name="M:EmikBaseModules.ModuleScript.Log(System.Object,System.Object[])">
            <summary>
            Logs multiple entries, but formats it to be compliant with the Logfile Analyzer.
            </summary>
            <param name="message">The message to log.</param>
            <param name="args">All of the arguments to embed into <paramref name="message"/>.</param>
        </member>
        <member name="T:EmikBaseModules.PathManager">
            <summary>
            Allows loading external information stored on the module. Do not use this code on the Editor. Written by Emik.
            </summary>
        </member>
        <member name="M:EmikBaseModules.PathManager.CombineMultiple(System.String[])">
            <summary>
            Combines multiple paths together.
            </summary>
            <param name="paths">The paths to combine with.</param>
            <returns>A single path consisting of the combined path of the array.</returns>
        </member>
        <member name="M:EmikBaseModules.PathManager.ModInfoVersion(System.String)">
            <summary>
            Retrieves the version number from the JSON file in the mod folder.
            </summary>
            <param name="bundleFileName">The name of the bundle assembly.</param>
            <returns>The version number of the mod.</returns>
        </member>
        <member name="M:EmikBaseModules.PathManager.GetPath(System.String)">
            <summary>
            Finds a path of a given file within each mod.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <param name="fileName">The file name to search for.</param>
            <returns>The path to <paramref name="fileName"/>.</returns>
        </member>
        <member name="M:EmikBaseModules.PathManager.LoadLibrary(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Loads a library by searching for the bundle. Do not run this on the Editor.
            </summary>
            <remarks>
            If the library has already been loaded, then this method will prematurely halt.
            </remarks>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <param name="bundleFileName">The name of the bundle file.</param>
            <param name="libraryFileName">The library's name, excluding the extension.</param>
            <param name="fileExtensionWindows">The file extension of the library for Windows.</param>
            <param name="fileExtensionMacOS">The file extension of the library for macOS</param>
            <param name="fileExtensionLinux">The file extension of the library for Linux.</param>
        </member>
        <member name="T:EmikBaseModules.Routine">
            <summary>
            Advanced coroutine handler. Written by Emik.
            </summary>
        </member>
        <member name="M:EmikBaseModules.Routine.#ctor(System.Func{System.Collections.IEnumerator},UnityEngine.MonoBehaviour)">
            <summary>
            Creates a list of coroutines so that you can start, restart, or stop any coroutine running inside this class.
            </summary>
            <param name="enumerator">The enumerator to call when initiated.</param>
            <param name="monoBehaviour">The MonoBehaviour to reference when calling the method.</param>
        </member>
        <member name="M:EmikBaseModules.Routine.Start(System.Boolean)">
            <summary>
            Starts the coroutine. Unless specified by <paramref name="allowSimultaneousRuns"/>, it will not be called if this class is in the middle of running the coroutine.
            </summary>
            <param name="allowSimultaneousRuns">Determines whether it should be allowed to create another instance of the coroutine even if it's running another one.</param>
        </member>
        <member name="M:EmikBaseModules.Routine.Restart">
            <summary>
            Stops and restarts the first coroutine that was run.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:EmikBaseModules.Routine.RestartAll">
            <summary>
            Restarts all coroutines currently running.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:EmikBaseModules.Routine`1">
            <summary>
            Advanced coroutine handler. Written by Emik.
            </summary>
        </member>
        <member name="M:EmikBaseModules.Routine`1.#ctor(System.Func{`0,System.Collections.IEnumerator},UnityEngine.MonoBehaviour)">
            <summary>
            Creates a list of coroutines so that you can start, restart, or stop any coroutine running inside this class.
            </summary>
            <param name="enumerator">The enumerator to call when initiated.</param>
            <param name="monoBehaviour">The MonoBehaviour to reference when calling the method.</param>
        </member>
        <member name="M:EmikBaseModules.Routine`1.Start(`0,System.Boolean)">
            <summary>
            Starts the coroutine. Unless specified by <paramref name="allowSimultaneousRuns"/>, it will not be called if this class is in the middle of running the coroutine.
            </summary>
            <param name="t">The first argument to pass into the coroutine.</param>
            <param name="allowSimultaneousRuns">Determines whether it should be allowed to create another instance of the coroutine even if it's running another one.</param>
        </member>
        <member name="M:EmikBaseModules.Routine`1.Restart(`0)">
            <summary>
            Stops and restarts the first coroutine that was run.
            </summary>
            <param name="t">The first argument to pass into the coroutine.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:EmikBaseModules.Routine`1.RestartAll(`0)">
            <summary>
            Restarts all coroutines currently running.
            </summary>
            <param name="t">The first argument to pass into the coroutine.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:EmikBaseModules.Routine`2">
            <summary>
            Advanced coroutine handler. Written by Emik.
            </summary>
        </member>
        <member name="M:EmikBaseModules.Routine`2.#ctor(System.Func{`0,`1,System.Collections.IEnumerator},UnityEngine.MonoBehaviour)">
            <summary>
            Creates a list of coroutines so that you can start, restart, or stop any coroutine running inside this class.
            </summary>
            <param name="enumerator">The enumerator to call when initiated.</param>
            <param name="monoBehaviour">The MonoBehaviour to reference when calling the method.</param>
        </member>
        <member name="M:EmikBaseModules.Routine`2.Start(`0,`1,System.Boolean)">
            <summary>
            Starts the coroutine. Unless specified by <paramref name="allowSimultaneousRuns"/>, it will not be called if this class is in the middle of running the coroutine.
            </summary>
            <param name="t1">The first argument to pass into the coroutine.</param>
            <param name="t2">The second argument to pass into the coroutine.</param>
            <param name="allowSimultaneousRuns">Determines whether it should be allowed to create another instance of the coroutine even if it's running another one.</param>
        </member>
        <member name="M:EmikBaseModules.Routine`2.Restart(`0,`1)">
            <summary>
            Stops and restarts the first coroutine that was run.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
            <param name="t1">The first argument to pass into the coroutine.</param>
            <param name="t2">The second argument to pass into the coroutine.</param>
        </member>
        <member name="M:EmikBaseModules.Routine`2.RestartAll(`0,`1)">
            <summary>
            Restarts all coroutines currently running.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
            <param name="t1">The first argument to pass into the coroutine.</param>
            <param name="t2">The second argument to pass into the coroutine.</param>
        </member>
        <member name="T:EmikBaseModules.Routine`3">
            <summary>
            Advanced coroutine handler. Written by Emik.
            </summary>
        </member>
        <member name="M:EmikBaseModules.Routine`3.#ctor(System.Func{`0,`1,`2,System.Collections.IEnumerator},UnityEngine.MonoBehaviour)">
            <summary>
            Creates a list of coroutines so that you can start, restart, or stop any coroutine running inside this class.
            </summary>
            <param name="enumerator">The enumerator to call when initiated.</param>
            <param name="monoBehaviour">The MonoBehaviour to reference when calling the method.</param>
        </member>
        <member name="M:EmikBaseModules.Routine`3.Start(`0,`1,`2,System.Boolean)">
            <summary>
            Starts the coroutine. Unless specified by <paramref name="allowSimultaneousRuns"/>, it will not be called if this class is in the middle of running the coroutine.
            </summary>
            <param name="t1">The first argument to pass into the coroutine.</param>
            <param name="t2">The second argument to pass into the coroutine.</param>
            <param name="t3">The third argument to pass into the coroutine.</param>
            <param name="allowSimultaneousRuns">Determines whether it should be allowed to create another instance of the coroutine even if it's running another one.</param>
        </member>
        <member name="M:EmikBaseModules.Routine`3.Restart(`0,`1,`2)">
            <summary>
            Stops and restarts the first coroutine that was run.
            </summary>
            <param name="t1">The first argument to pass into the coroutine.</param>
            <param name="t2">The second argument to pass into the coroutine.</param>
            <param name="t3">The third argument to pass into the coroutine.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:EmikBaseModules.Routine`3.RestartAll(`0,`1,`2)">
            <summary>
            Restarts all coroutines currently running.
            </summary>
            <param name="t1">The first argument to pass into the coroutine.</param>
            <param name="t2">The second argument to pass into the coroutine.</param>
            <param name="t3">The third argument to pass into the coroutine.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:EmikBaseModules.Routine`4">
            <summary>
            Advanced coroutine handler. Written by Emik.
            </summary>
        </member>
        <member name="M:EmikBaseModules.Routine`4.#ctor(System.Func{`0,`1,`2,`3,System.Collections.IEnumerator},UnityEngine.MonoBehaviour)">
            <summary>
            Creates a list of coroutines so that you can start, restart, or stop any coroutine running inside this class.
            </summary>
            <param name="enumerator">The enumerator to call when initiated.</param>
            <param name="monoBehaviour">The MonoBehaviour to reference when calling the method.</param>
        </member>
        <member name="M:EmikBaseModules.Routine`4.Start(`0,`1,`2,`3,System.Boolean)">
            <summary>
            Starts the coroutine. Unless specified by <paramref name="allowSimultaneousRuns"/>, it will not be called if this class is in the middle of running the coroutine.
            </summary>
            <param name="t1">The first argument to pass into the coroutine.</param>
            <param name="t2">The second argument to pass into the coroutine.</param>
            <param name="t3">The third argument to pass into the coroutine.</param>
            <param name="t4">The fourth argument to pass into the coroutine.</param>
            <param name="allowSimultaneousRuns">Determines whether it should be allowed to create another instance of the coroutine even if it's running another one.</param>
        </member>
        <member name="M:EmikBaseModules.Routine`4.Restart(`0,`1,`2,`3)">
            <summary>
            Stops and restarts the first coroutine that was run.
            </summary>
            <param name="t1">The first argument to pass into the coroutine.</param>
            <param name="t2">The second argument to pass into the coroutine.</param>
            <param name="t3">The third argument to pass into the coroutine.</param>
            <param name="t4">The fourth argument to pass into the coroutine.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:EmikBaseModules.Routine`4.RestartAll(`0,`1,`2,`3)">
            <summary>
            Restarts all coroutines currently running.
            </summary>
            <param name="t1">The first argument to pass into the coroutine.</param>
            <param name="t2">The second argument to pass into the coroutine.</param>
            <param name="t3">The third argument to pass into the coroutine.</param>
            <param name="t4">The fourth argument to pass into the coroutine.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:EmikBaseModules.RoutineBase">
            <summary>
            Abstract class for the <see cref="T:EmikBaseModules.Routine"/> datatype, since the different overloads are similar to each other. Written by Emik.
            </summary>
        </member>
        <member name="M:EmikBaseModules.RoutineBase.Stop">
            <summary>
            Stops the first coroutine that was called, and removes it from the list of coroutines.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:EmikBaseModules.RoutineBase.StopAll">
            <summary>
            Stops all instances of the coroutine, and clears the list of coroutines.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:EmikBaseModules.RoutineBase.IsRunning">
            <value>
            Determines whether it is currently running any coroutines.
            </value>
        </member>
        <member name="P:EmikBaseModules.RoutineBase.Coroutines">
            <value>
            The list of all coroutines currently running.
            </value>
        </member>
        <member name="P:EmikBaseModules.RoutineBase.MonoBehaviour">
            <value>
            The MonoBehaviour that is being used to start the coroutines.
            </value>
        </member>
        <member name="T:EmikBaseModules.TPScript">
            <summary>
            Base class for TwitchPlays support for regular and needy modded modules in Keep Talking and Nobody Explodes. Written by Emik.
            </summary>
        </member>
        <member name="M:EmikBaseModules.TPScript.ProcessTwitchCommand(System.String)">
            <summary>
            When a command is typed into Twitch Plays with the Id of this module, it calls this method and passes in the exact command typed.
            </summary>
            <param name="command">The user's command.</param>
            <returns>A series of instructions for the Twitch Plays mod to handle.</returns>
        </member>
        <member name="M:EmikBaseModules.TPScript.TwitchHandleForcedSolve">
            <summary>
            When the module runs into an exception or the module is forced to be solved, it calls this method.
            </summary>
            <remarks>
            Make sure that the module is solved before this method closes, otherwise it causes a forced-solve.
            </remarks>
            <returns>A series of instructions for the Twitch Plays mod to handle.</returns>
        </member>
        <member name="P:EmikBaseModules.TPScript.TwitchHelpMessage">
            <value>
            The help message that gets sent when typing help. Currently unsupported by the Twitch Plays mod. Use <c>new private const string TwitchHelpMessage</c> instead. The reason that this element is in here is because it may be added in the future, however it serves no purpose as of right now.
            </value>
        </member>
        <member name="P:EmikBaseModules.TPScript.TwitchManualCode">
            <value>
            The link to the manual, by default leave this untouched unless you have a special link to the manual. Currently unsupported by the Twitch Plays mod. Use <c>new private const string TwitchManualCode</c> instead. The reason that this element is in here is because it may be added in the future, however it serves no purpose as of right now.
            </value>
        </member>
        <member name="F:EmikBaseModules.TPScript.Strike">
            <summary>
            Yield return this to indicate that this command will cause a strike at some later point; all this does is tell Twitch Plays to attribute the strike to the author of this command.
            </summary>
        </member>
        <member name="F:EmikBaseModules.TPScript.Solve">
            <summary>
            Yield return this to indicate that this command will solve the module at some later point; all this does is tell Twitch Plays to attribute the solve to the author of this command.
            </summary>
        </member>
        <member name="F:EmikBaseModules.TPScript.UnsubmittablePenalty">
            <summary>
            Yield return this to indicate that the command couldn't submit an answer and should only be used to prevent users from guessing the answer. This should not be used if an answer could never be submittable for a module.
            </summary>
        </member>
        <member name="F:EmikBaseModules.TPScript.TryCancelSequence">
            <summary>
            Yield return this to indicate that the <c>KMSelectable[]</c> sequence that follows this command should be cancelled if a "!cancel" or "!stop" is issued mid-way through that sequence.
            </summary>
        </member>
        <member name="F:EmikBaseModules.TPScript.Cancelled">
            <summary>
            Yield return this to indicate that you have stopped processing the command in response to the <see cref="F:EmikBaseModules.TPScript.TwitchShouldCancelCommand"/> bool being set to true.
            </summary>
        </member>
        <member name="F:EmikBaseModules.TPScript.MultipleStrikes">
            <summary>
            Yield return this to indicate that the issued command is going to cause more than one strike, so should disable the internal strike tracker in order to avoid flooding the chat with "VoteNay Module {id} got a strike! +1 strike to {Nickname}" for as many strikes as will be awarded. This also disables the internal solve tracker as well. This allows for sending additional messages or continue processing commands regardless of the solve/strike state.
            </summary>
        </member>
        <member name="F:EmikBaseModules.TPScript.EndMultipleStrikes">
            <summary>
            Yield return this to indicate that the strike tracker should be enabled. If any strikes were issued during the time it was disabled, they will be awarded and the routine stopped at that point, otherwise, it will just cancel the "VoteNay Module {id} got 0 strikes! +0 strike to {Nickname}" message that would otherwise be posted. Likewise, if the module was solved at the time this command is issued, the processing will be stopped as of that point as well.
            </summary>
        </member>
        <member name="F:EmikBaseModules.TPScript.AutoSolve">
            <summary>
            Yield return this to indicate automatically solving the module, as if it threw an exception while solving.
            </summary>
        </member>
        <member name="F:EmikBaseModules.TPScript.CancelDetonate">
            <summary>
            Yield return this to indicate cancelling a previously issued delayed detonation command on the same module.
            </summary>
        </member>
        <member name="F:EmikBaseModules.TPScript.WaitingMusic">
            <summary>
            Yield return this to indicate playing the waiting music if a command will take long to finish.
            </summary>
        </member>
        <member name="F:EmikBaseModules.TPScript.EndWaitingMusic">
            <summary>
            Yield return this to indicate stopping the waiting music mid-command.
            </summary>
        </member>
        <member name="F:EmikBaseModules.TPScript.ToggleWaitingMusic">
            <summary>
            Yield return this to toggle the waiting music on and off mid-command.
            </summary>
        </member>
        <member name="F:EmikBaseModules.TPScript.HideCamera">
            <summary>
            Yield return this to hide the heads-up display and cameras while doing quaternion rotations, if it is expected that the camera/hud will get in the way.
            </summary>
        </member>
        <member name="F:EmikBaseModules.TPScript.TwitchShouldCancelCommand">
            <summary>
            These values are set by the Twitch Plays mod using reflection.
            </summary>
        </member>
        <member name="F:EmikBaseModules.TPScript.TwitchPlaysSkipTimeAllowed">
            <summary>
            These values are set by the Twitch Plays mod using reflection.
            </summary>
        </member>
        <member name="F:EmikBaseModules.TPScript.TwitchAbandonModule">
            <summary>
            Declaring this field allows for Twitch Plays to inform the module that the bomb is in Time Mode, where solves change the timer. This is useful for modules that use the timer's value. This field is set in <c>Start()</c>, therefore there's no guarantee that it'll be available there, therefore the field must be first accessed in a delegate in <c>KMBombModule.OnActivate()</c> or <c>KMNeedyModule.OnActivate()</c> or later.
            </summary>
        </member>
        <member name="M:EmikBaseModules.TPScript.OnInteractSequence(KMSelectable[],System.Int32[],System.Single,EmikBaseModules.ModuleScript)">
            <summary>
            Presses a sequence of buttons according to <paramref name="indices"/> within <paramref name="selectables"/>, waiting <paramref name="wait"/> seconds in-between each, and interrupting as soon as <see cref="P:EmikBaseModules.ModuleScript.IsStrike"/> is true.
            </summary>
            <param name="selectables">The array of selectables to interact with.</param>
            <param name="indices">The indices to press within the array.</param>
            <param name="wait">The delay between each button press in seconds.</param>
            <param name="module">A reference is required to check if <see cref="P:EmikBaseModules.ModuleScript.IsStrike"/> is true.</param>
            <returns>A sequence of button presses for Twitch Plays to process.</returns>
        </member>
        <member name="M:EmikBaseModules.TPScript.HaltUntil(System.Boolean)">
            <summary>
            An IEnumerator that will not halt until the condition is false.
            </summary>
            <remarks>
            Currently Twitch Plays does not support looking IEnumerators recursively, so its purpose is currently limited, however this can still be used as a regular while loop.
            </remarks>
            <param name="condition">The condition to check for.</param>
            <returns>True until <paramref name="condition"/> is false, in which it halts.</returns>
        </member>
        <member name="M:EmikBaseModules.TPScript.IsMatch(System.String,System.String,System.Boolean,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Determines whether the input string matches the regex of the pattern.
            </summary>
            <param name="input">The test string.</param>
            <param name="pattern">The regular expression.</param>
            <param name="lenient">Whether it should add the default <c>^\s* PATTERN \s*$</c> embeded into most regex usages for Twitch Plays.</param>
            <param name="options">Any additional options for regular expressions.</param>
            <returns>True if <paramref name="lenient"/> passes the test of the <paramref name="pattern"/>.</returns>
        </member>
        <member name="M:EmikBaseModules.TPScript.Evaluate(System.Boolean,System.Object)">
            <summary>
            Returns <paramref name="output"/> if <paramref name="condition"/> is true, otherwise null.
            </summary>
            <remarks>
            You can yield return this to send error messages or interactions by first checking for the condition.
            </remarks>
            <param name="condition">The boolean to check.</param>
            <param name="output">The output to return if <paramref name="condition"/> is true.</param>
            <returns><paramref name="output"/> or null, depending on <paramref name="condition"/>.</returns>
        </member>
        <member name="M:EmikBaseModules.TPScript.Evaluate(System.Boolean,System.Object,System.Object)">
            <summary>
            Works as a ternary operator. Returns <paramref name="then"/> if <paramref name="condition"/> is true, otherwise <paramref name="otherwise"/>.
            </summary>
            <remarks>
            You can yield return this to send error messages or interactions by first checking for the condition.
            </remarks>
            <param name="condition">The boolean to check.</param>
            <param name="then">The output to return if <paramref name="condition"/> is true.</param>
            <param name="otherwise">The output to return if <paramref name="condition"/> is false.</param>
            <returns><paramref name="then"/> or <paramref name="otherwise"/>, depending on <paramref name="condition"/>.</returns>
        </member>
        <member name="M:EmikBaseModules.TPScript.StrikeMessage(System.String)">
            <summary>
            Yield return this to allow you to tell the user why they got a strike if it isn't clear.
            </summary>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:EmikBaseModules.TPScript.TryCancel(System.String)">
            <summary>
            Yield return this to indicate that this command is allowed to be cancelled at the given time of the yield. Just know that you won't be able to clean up if you do your cancel this way, and there is a pending !cancel or !stop.
            </summary>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:EmikBaseModules.TPScript.TryWaitCancel(System.Single,System.String)">
            <summary>
            Yield return this to cause Twitch Plays to wait for the given time, and any time during the entire duration, the command may cancel. Like "trycancel", you won't be able to clean up if you cancel this way. Also like "trycancel", <paramref name="message"/> is optional.
            </summary>
            <param name="time">The amount of time to wait.</param>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:EmikBaseModules.TPScript.SendToChat(System.String)">
            <summary>
            Yield return this to send a chat directly to twitch chat.
            </summary>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:EmikBaseModules.TPScript.SendToChatError(System.String)">
            <summary>
            Yield return this to send a message to the chat about why a users' command was invalid.
            </summary>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:EmikBaseModules.TPScript.SendDelayedMessage(System.Single,System.String)">
            <summary>
            Yield return this to send a message to chat after <paramref name="time"/> seconds.
            </summary>
            <param name="time">The amount of time to wait before the message gets sent.</param>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:EmikBaseModules.TPScript.Detonate(System.Nullable{System.Single},System.String)">
            <summary>
            Yield return this to explode the bomb instantly. <paramref name="time"/> is specified in number of seconds before the bomb explodes. (Note, sending another detonate command will auto-cancel the previous one on the same module if it hasn't happened already.). <paramref name="message"/> is the message to send to chat upon detonation. Both of the parameters are optional.
            </summary>
            <param name="time">The amount of time before the bomb blows up.</param>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:EmikBaseModules.TPScript.SkipTime(System.String)">
            <summary>
            Yield return this to try advancing the clock to the specified time. You must put the full time you wish to skip to, and this time either needs to be less than the current time, if in normal/time mode, or greater than the current time, if in zen mode. Example, if you wanted to set the clock to 5:24, then you do "skiptime 324" or "skiptime 5:24". You can target partway through the seconds, such as "skiptime 45.28", which would then set the clock to 45.28, provided that time has NOT gone by already. You must also declare the <see cref="F:EmikBaseModules.TPScript.TwitchPlaysSkipTimeAllowed"/> bool, and set it to true, for this function to work.
            </summary>
            <param name="seconds">The time to skip to in seconds.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:EmikBaseModules.TPScript.AwardPoints(System.Int32)">
            <summary>
            Yield return this to award the user that sent the command points directly, this is currently used for mods like Souvenir to give points to users that answered the questions equally.
            </summary>
            <param name="points">The amount of points to award. Negatives supported.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:EmikBaseModules.TPScript.AwardPointsOnSolve(System.Int32)">
            <summary>
            Yield return this to award the last user that sent the command points when the module is solved. The module must prevent any user from sending commands afterward in order for Twitch Plays to award points to the correct user. This is currently used by the Twin module when extra points must be given but the module is not solved immediately.
            </summary>
            <param name="points">The amount of points to award. Negatives supported.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="T:EmikBaseModules.Tuple">
            <summary>
            An abstract class that introduces traits that each tuple class has in common. Written by Emik.
            </summary>
        </member>
        <member name="P:EmikBaseModules.Tuple.ToArray">
            <value>
            All other properties in an array.
            </value>
        </member>
        <member name="T:EmikBaseModules.Tuple`1">
            <summary>
            A basic tuple datatype for C# 4. Written by Emik.
            </summary>
        </member>
        <member name="M:EmikBaseModules.Tuple`1.#ctor(`0)">
            <summary>
            Creates a singleton tuple.
            </summary>
            <param name="item1">The item to pass into the first property.</param>
        </member>
        <member name="P:EmikBaseModules.Tuple`1.Item1">
            <value>
            The first item of the tuple.
            </value>
        </member>
        <member name="P:EmikBaseModules.Tuple`1.ToArray">
            <value>
            All other properties in an array.
            </value>
        </member>
        <member name="T:EmikBaseModules.Tuple`2">
            <summary>
            A basic tuple datatype for C# 4. Written by Emik.
            </summary>
        </member>
        <member name="M:EmikBaseModules.Tuple`2.#ctor(`0,`1)">
            <summary>
            Creates a tuple of size 2.
            </summary>
            <param name="item1">The item to pass into the first property.</param>
            <param name="item2">The item to pass into the second property.</param>
        </member>
        <member name="P:EmikBaseModules.Tuple`2.Item1">
            <value>
            The first item of the tuple.
            </value>
        </member>
        <member name="P:EmikBaseModules.Tuple`2.Item2">
            <value>
            The second item of the tuple.
            </value>
        </member>
        <member name="P:EmikBaseModules.Tuple`2.ToArray">
            <value>
            All other properties in an array.
            </value>
        </member>
        <member name="T:EmikBaseModules.Tuple`3">
            <summary>
            A basic tuple datatype for C# 4. Written by Emik.
            </summary>
        </member>
        <member name="M:EmikBaseModules.Tuple`3.#ctor(`0,`1,`2)">
            <summary>
            Creates a tuple of size 3.
            </summary>
            <param name="item1">The item to pass into the first property.</param>
            <param name="item2">The item to pass into the second property.</param>
            <param name="item3">The item to pass into the third property.</param>
        </member>
        <member name="P:EmikBaseModules.Tuple`3.Item1">
            <value>
            The first item of the tuple.
            </value>
        </member>
        <member name="P:EmikBaseModules.Tuple`3.Item2">
            <value>
            The second item of the tuple.
            </value>
        </member>
        <member name="P:EmikBaseModules.Tuple`3.Item3">
            <value>
            The third item of the tuple.
            </value>
        </member>
        <member name="P:EmikBaseModules.Tuple`3.ToArray">
            <value>
            All other properties in an array.
            </value>
        </member>
        <member name="T:EmikBaseModules.Tuple`4">
            <summary>
            A basic tuple datatype for C# 4. Written by Emik.
            </summary>
        </member>
        <member name="M:EmikBaseModules.Tuple`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Creates a tuple of size 4.
            </summary>
            <param name="item1">The item to pass into the first property.</param>
            <param name="item2">The item to pass into the second property.</param>
            <param name="item3">The item to pass into the third property.</param>
            <param name="item4">The item to pass into the fourth property.</param>
        </member>
        <member name="P:EmikBaseModules.Tuple`4.Item1">
            <value>
            The first item of the tuple.
            </value>
        </member>
        <member name="P:EmikBaseModules.Tuple`4.Item2">
            <value>
            The second item of the tuple.
            </value>
        </member>
        <member name="P:EmikBaseModules.Tuple`4.Item3">
            <value>
            The third item of the tuple.
            </value>
        </member>
        <member name="P:EmikBaseModules.Tuple`4.Item4">
            <value>
            The fourth item of the tuple.
            </value>
        </member>
        <member name="P:EmikBaseModules.Tuple`4.ToArray">
            <value>
            All other properties in an array.
            </value>
        </member>
        <member name="T:EmikBaseModules.Unwrapper">
            <summary>
            A class for debugging. Provides many options that opt into reflection. This is not recommended to be used on runtime. Written by Emik.
            </summary>
        </member>
        <member name="M:EmikBaseModules.Unwrapper.NameOfVariable(System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            Returns the name of a variable.
            </summary>
            <param name="e"></param>
            <returns>The name of the variable, or if it cannot find it, <see cref="F:EmikBaseModules.Unwrapper.Unknown"/>.</returns>
        </member>
        <member name="M:EmikBaseModules.Unwrapper.Unwrap(System.Object,System.Boolean)">
            <summary>
            Unwraps any object, whether it be a class, list, tuple, or something else.
            </summary>
            <param name="item">The object to unwrap.</param>
            <param name="getVariables">Whether it should search recursively inside the variable and yield return the elements inside <paramref name="item"/>.</param>
            <returns>An IEnumerable of the <paramref name="item"/> unwrapped.</returns>
        </member>
        <member name="M:EmikBaseModules.Unwrapper.Dump(EmikBaseModules.ModuleScript,System.Boolean,System.Linq.Expressions.Expression{System.Func{System.Object}}[])">
            <summary>
            Dumps all information about the variables specified. Each element uses the syntax () => varName. This should only be used to debug.
            </summary>
            <param name="module">The instance of the module, so that it can log under its name.</param>
            <param name="getVariables">Whether it should search recursively for the elements within the elements.</param>
            <param name="logs">All of the variables to throughly log.</param>
        </member>
        <member name="M:EmikBaseModules.Unwrapper.Dump(EmikBaseModules.ModuleScript,System.Boolean)">
            <summary>
            Dumps all information that it can find of the module using reflection. This should only be used to debug.
            </summary>
            <param name="module">The instance of the module, so that it can log under its name.</param>
            <param name="getVariables">Whether it should search recursively for the elements within the elements.</param>
        </member>
        <member name="M:EmikBaseModules.Unwrapper.Unwrap(System.Object)">
            <summary>
            Unwraps any object, whether it be a class, list, tuple, or something else.
            </summary>
            <param name="item">The object to unwrap.</param>
            <returns>An IEnumerable of the <paramref name="item"/> unwrapped.</returns>
        </member>
        <member name="M:EmikBaseModules.Unwrapper.Dump(EmikBaseModules.ModuleScript,System.Linq.Expressions.Expression{System.Func{System.Object}}[])">
            <summary>
            Dumps all information about the variables specified. Each element uses the syntax () => varName. This should only be used to debug.
            </summary>
            <param name="module">The instance of the module, so that it can log under its name.</param>
            <param name="logs">All of the variables to throughly log.</param>
        </member>
        <member name="M:EmikBaseModules.Unwrapper.Dump(EmikBaseModules.ModuleScript)">
            <summary>
            Dumps all information that it can find of the module using reflection. This should only be used to debug.
            </summary>
            <param name="module">The instance of the module, so that it can log under its name.</param>
        </member>
        <member name="T:EmikBaseModules.Work">
            <summary>
            Advanced multi-threading handler. Written by Emik.
            </summary>
        </member>
        <member name="M:EmikBaseModules.Work.#ctor(System.Action,System.Boolean,System.UInt32)">
            <summary>
            Stores the method so that it can later be called when a new thread starts.
            </summary>
            <param name="work">The method to call when thread starts.</param>
            <param name="allowSimultaneousActive">Whether it should allow multiple of itself to be running at once.</param>
            <param name="maximumThreadsActive">The amount of threads this class, and all of its overloads can run at once.</param>
        </member>
        <member name="M:EmikBaseModules.Work.Start">
            <summary>
            Starts a new thread, and waits until it is finished before halting.
            </summary>
            <returns><see cref="T:UnityEngine.WaitWhile"/> in various places until the thread has been finished.</returns>
        </member>
        <member name="T:EmikBaseModules.Work`1">
            <summary>
            Advanced multi-threading handler. Written by Emik.
            </summary>
        </member>
        <member name="M:EmikBaseModules.Work`1.#ctor(System.Func{`0},System.Boolean,System.UInt32)">
            <summary>
            Stores the method so that it can later be called when a new thread starts.
            </summary>
            <param name="work">The method to call when thread starts.</param>
            <param name="allowSimultaneousActive">Whether it should allow multiple of itself to be running at once.</param>
            <param name="maximumThreadsActive">The amount of threads this class, and all of its overloads can run at once.</param>
        </member>
        <member name="M:EmikBaseModules.Work`1.Start">
            <summary>
            Starts a new thread, and waits until it is finished before halting.
            </summary>
            <returns><see cref="T:UnityEngine.WaitWhile"/> in various places until the thread has been finished.</returns>
        </member>
        <member name="P:EmikBaseModules.Work`1.Result">
            <value>
            The returned value of the thread.
            </value>
        </member>
        <member name="T:EmikBaseModules.Work`2">
            <summary>
            Advanced multi-threading handler. Written by Emik.
            </summary>
        </member>
        <member name="M:EmikBaseModules.Work`2.#ctor(System.Func{`0,`1},System.Boolean,System.UInt32)">
            <summary>
            Stores the method so that it can later be called when a new thread starts.
            </summary>
            <param name="work">The method to call when thread starts.</param>
            <param name="allowSimultaneousActive">Whether it should allow multiple of itself to be running at once.</param>
            <param name="maximumThreadsActive">The amount of threads this class, and all of its overloads can run at once.</param>
        </member>
        <member name="M:EmikBaseModules.Work`2.Start(`0)">
            <summary>
            Starts a new thread, and waits until it is finished before halting.
            </summary>
            <returns><see cref="T:UnityEngine.WaitWhile"/> in various places until the thread has been finished.</returns>
        </member>
        <member name="P:EmikBaseModules.Work`2.Result">
            <value>
            The returned value of the thread.
            </value>
        </member>
        <member name="T:EmikBaseModules.Work`3">
            <summary>
            Advanced multi-threading handler. Written by Emik.
            </summary>
        </member>
        <member name="M:EmikBaseModules.Work`3.#ctor(System.Func{`0,`1,`2},System.Boolean,System.UInt32)">
            <summary>
            Stores the method so that it can later be called when a new thread starts.
            </summary>
            <param name="work">The method to call when thread starts.</param>
            <param name="allowSimultaneousActive">Whether it should allow multiple of itself to be running at once.</param>
            <param name="maximumThreadsActive">The amount of threads this class, and all of its overloads can run at once.</param>
        </member>
        <member name="M:EmikBaseModules.Work`3.Start(`0,`1)">
            <summary>
            Starts a new thread, and waits until it is finished before halting.
            </summary>
            <returns><see cref="T:UnityEngine.WaitWhile"/> in various places until the thread has been finished.</returns>
        </member>
        <member name="P:EmikBaseModules.Work`3.Result">
            <value>
            The returned value of the thread.
            </value>
        </member>
        <member name="T:EmikBaseModules.Work`4">
            <summary>
            Advanced multi-threading handler. Written by Emik.
            </summary>
        </member>
        <member name="M:EmikBaseModules.Work`4.#ctor(System.Func{`0,`1,`2,`3},System.Boolean,System.UInt32)">
            <summary>
            Stores the method so that it can later be called when a new thread starts.
            </summary>
            <param name="work">The method to call when thread starts.</param>
            <param name="allowSimultaneousActive">Whether it should allow multiple of itself to be running at once.</param>
            <param name="maximumThreadsActive">The amount of threads this class, and all of its overloads can run at once.</param>
        </member>
        <member name="M:EmikBaseModules.Work`4.Start(`0,`1,`2)">
            <summary>
            Starts a new thread, and waits until it is finished before halting.
            </summary>
            <returns><see cref="T:UnityEngine.WaitWhile"/> in various places until the thread has been finished.</returns>
        </member>
        <member name="P:EmikBaseModules.Work`4.Result">
            <value>
            The returned value of the thread.
            </value>
        </member>
        <member name="T:EmikBaseModules.Work`5">
            <summary>
            Advanced multi-threading handler. Written by Emik.
            </summary>
        </member>
        <member name="M:EmikBaseModules.Work`5.#ctor(System.Func{`0,`1,`2,`3,`4},System.Boolean,System.UInt32)">
            <summary>
            Stores the method so that it can later be called when a new thread starts.
            </summary>
            <param name="work">The method to call when thread starts.</param>
            <param name="allowSimultaneousActive">Whether it should allow multiple of itself to be running at once.</param>
            <param name="maximumThreadsActive">The amount of threads this class, and all of its overloads can run at once.</param>
        </member>
        <member name="M:EmikBaseModules.Work`5.Start(`0,`1,`2,`3)">
            <summary>
            Starts a new thread, and waits until it is finished before halting.
            </summary>
            <returns><see cref="T:UnityEngine.WaitWhile"/> in various places until the thread has been finished.</returns>
        </member>
        <member name="P:EmikBaseModules.Work`5.Result">
            <value>
            The returned value of the thread.
            </value>
        </member>
        <member name="T:EmikBaseModules.WorkBase">
            <summary>
            Abstract class for the <see cref="T:EmikBaseModules.Work"/> datatype, since the different overloads are similar to each other. Written by Emik.
            </summary>
        </member>
        <member name="M:EmikBaseModules.WorkBase.Stop">
            <summary>
            Interrupts the thread.
            </summary>
        </member>
        <member name="P:EmikBaseModules.WorkBase.IsRunning">
            <value>
            Determines whether any thread in this class in running.
            </value>
        </member>
        <member name="P:EmikBaseModules.WorkBase.AllowSimultaneousActive">
            <value>
            Determines whether it should skip on starting a thread if it doesn't allow multiple.
            </value>
        </member>
        <member name="P:EmikBaseModules.WorkBase.MaximumThreadsActive">
            <value>
            Determines the maximum number of threads it allows to be running at once within this class. This will make the class wait until <see cref="P:EmikBaseModules.WorkBase.ThreadsActive"/> is strictly less than this value.
            </value>
        </member>
        <member name="P:EmikBaseModules.WorkBase.ThreadsActive">
            <value>
            Counts the number of threads currently active within this class, and all of its overloads.
            </value>
        </member>
        <member name="P:EmikBaseModules.WorkBase.Thread">
            <value>
            The thread of the class.
            </value>
        </member>
        <member name="M:EmikBaseModules.WorkBase.WaitForOtherThreads">
            <summary>
            Waits until it is allowed to run a thread.
            </summary>
            <returns><see cref="T:UnityEngine.WaitWhile"/> until <see cref="P:EmikBaseModules.WorkBase.ThreadsActive"/> is strictly less than <see cref="P:EmikBaseModules.WorkBase.MaximumThreadsActive"/>.</returns>
        </member>
        <member name="M:EmikBaseModules.WorkBase.WaitForOwnThread">
            <summary>
            Waits until its own thread is no longer running..
            </summary>
            <returns><see cref="T:UnityEngine.WaitWhile"/> until <see cref="P:EmikBaseModules.WorkBase.IsRunning"/> is no longer true.</returns>
        </member>
    </members>
</doc>
