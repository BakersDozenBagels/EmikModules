<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>wawa.TwitchPlays</name>
    </assembly>
    <members>
        <member name="T:System.Diagnostics.Contracts.PureAttribute">
            <summary>Indicates that a type or method is pure, that is, it does not make any visible state changes.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue" />, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute" /> class
            with the specified return value condition.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition is <see langword="true" /> or <see langword="false" />.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue" />,
            the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute" /> class
            with the specified return value condition.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition is <see langword="true" /> or <see langword="false" />.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute" /> class
            with the associated parameter name.
            </summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute" /> class
            with the specified parameter value.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets a value indicating whether the condition parameter value
            is <see langword="true" /> or <see langword="false" />.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute" /> class with a field or property member.
            </summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute" /> class
            with the list of field and property members.
            </summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute" /> class
            with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute" /> class
            with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition is <see langword="true" /> or <see langword="false" />.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlyCollection`1">
            <summary>Provides a read-only, covariant view of a generic list.</summary>
            <typeparam name="T">The type of item on the list.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyCollection`1.Count">
            <summary>Gets the amount of items on the list.</summary>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlyDictionary`2">
            <summary>Provides a read-only view of a generic dictionary.</summary>
            <typeparam name="TKey">The type of key in the dictionary.</typeparam>
            <typeparam name="TValue">The type of value in the dictionary.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Keys">
            <summary>Gets all enumeration of all keys.</summary>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Values">
            <summary>Gets an enumeration of all values.</summary>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)">
            <summary>Gets the value of the key.</summary>
            <param name="key">The key to index.</param>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>Determines whether a key exists in this dictionary.</summary>
            <param name="key">The key to check.</param>
            <returns>
            The value <see langword="true" /> if the key exists in the dictionary, otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>Determines whether a key exists in this dictionary and extracts the value.</summary>
            <param name="key">The key to check.</param>
            <param name="value">The value to output.</param>
            <returns>
            The value <see langword="true" /> if the key exists in the dictionary, otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlyList`1">
            <summary>Represents a read-only collection of elements that can be accessed by index.</summary>
            <typeparam name="T">The type of elements in the read-only list.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)">
            <summary>Performs an index operation on the list.</summary>
            <param name="index">The item to retrieve.</param>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlySet`1">
            <summary>Provides a readonly abstraction of a set.</summary>
            <typeparam name="T">The type of elements in the set.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.Contains(`0)">
            <summary>Determines if the set contains a specific item.</summary>
            <param name="item">The item to check if the set contains.</param>
            <returns><see langword="true" /> if found; otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determines whether the current set is a proper (strict) subset of a specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true" /> if the current set is a proper subset of other; otherwise <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determines whether the current set is a proper (strict) superset of a specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true" /> if the collection is a proper superset of other; otherwise <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determine whether the current set is a subset of a specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns><see langword="true" /> if the current set is a subset of other; otherwise <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determine whether the current set is a super set of a specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns><see langword="true" /> if the current set is a subset of other; otherwise <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determines whether the current set overlaps with the specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true" /> if the current set and other share at least one common element;
            otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determines whether the current set and the specified collection contain the same elements.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true" /> if the current set is equal to other; otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null" />.</exception>
        </member>
        <member name="T:System.Collections.Generic.ISet`1">
            <summary>
            Generic collection that guarantees the uniqueness of its elements, as defined by some comparer.
            It also supports basic set operations such as Union, Intersection, Complement and Exclusive Complement.
            </summary>
            <typeparam name="T">The type of element in the set.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Transforms this set so it contains no elements that are also in an <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>Transforms this set into its intersection with an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Transforms this set so it contains elements initially in this or an <see cref="T:System.Collections.Generic.IEnumerable`1" />, but not both.
            </summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>Transforms this set into its union with an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.Add(`0)">
            <summary>Adds an item to the set.</summary>
            <param name="item">The item to add.</param>
            <returns>The value <see langword="true" /> if added, <see langword="false" /> if duplicate.</returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Checks if this set is a subset of an <see cref="T:System.Collections.Generic.IEnumerable`1" />, but not the same as it.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
            <returns>The value <see langword="true" /> if a match is found, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Checks if this set is a superset of an <see cref="T:System.Collections.Generic.IEnumerable`1" />, but not the same as it.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
            <returns>The value <see langword="true" /> if a match is found, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Checks if this set is a subset of an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
            <returns>The value <see langword="true" /> if a match is found, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Checks if this set is a superset of an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
            <returns>The value <see langword="true" /> if a match is found, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>Checks if this set has any elements in common with an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
            <returns>The value <see langword="true" /> if a match is found, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if this set contains the same and only the same elements as an <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
            <returns>The value <see langword="true" /> if a match is found, otherwise <see langword="false" />.</returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerFilePathAttribute">
            <inheritdoc />
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerLineNumberAttribute">
            <inheritdoc />
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerMemberNameAttribute">
            <inheritdoc />
        </member>
        <member name="T:NullGuard.AllowNullAttribute">
            <summary>Prevents the injection of null checking (implicit mode only).</summary>
        </member>
        <member name="T:Wawa.TwitchPlays.Domains.AliasAttribute">
            <summary>An <see cref="T:System.Attribute" /> to attach to a field to signify alternative ways to spell it.</summary>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.AliasAttribute.#ctor(System.String[])">
            <summary>Initializes a new instance of the <see cref="T:Wawa.TwitchPlays.Domains.AliasAttribute" /> class.</summary>
            <exception cref="T:System.InvalidOperationException">
            A <see cref="T:System.String" /> in <paramref name="aliases" /> contain at least one <see cref="T:System.Char" /> that is whitespace,
            according to <see cref="M:System.Char.IsWhiteSpace(System.Char)" />.
            </exception>
            <param name="aliases">The prefix of this command.</param>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.AliasAttribute.Aliases">
            <summary>Gets the alternative representations.</summary>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.AliasAttribute.op_Equality(Wawa.TwitchPlays.Domains.AliasAttribute,Wawa.TwitchPlays.Domains.AliasAttribute)">
            <summary>Determines whether both have the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true" /> if both of them contain the same values,
            otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.AliasAttribute.op_Inequality(Wawa.TwitchPlays.Domains.AliasAttribute,Wawa.TwitchPlays.Domains.AliasAttribute)">
            <summary>Determines whether both do not have the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true" /> if both of them do not contain the same values,
            otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.AliasAttribute.ToString(System.Reflection.FieldInfo)">
            <summary>Gets a <see langword="string" /> representation showing every alias.</summary>
            <param name="x">The field.</param>
            <returns>A concatenation of the parameter <paramref name="x" /> with <see cref="P:Wawa.TwitchPlays.Domains.AliasAttribute.Aliases" />.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.AliasAttribute.Equals(Wawa.TwitchPlays.Domains.AliasAttribute)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.AliasAttribute.Equals(Wawa.TwitchPlays.Domains.AliasAttribute,Wawa.TwitchPlays.Domains.AliasAttribute)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.AliasAttribute.GetHashCode(Wawa.TwitchPlays.Domains.AliasAttribute)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.AliasAttribute.Clone">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.AliasAttribute.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.AliasAttribute.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.AliasAttribute.ToString">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.AliasAttribute.ToString(System.String)">
            <summary>Gets a <see langword="string" /> representation showing every alias.</summary>
            <param name="x">The original name of the field.</param>
            <returns>A concatenation of the parameter <paramref name="x" /> with <see cref="P:Wawa.TwitchPlays.Domains.AliasAttribute.Aliases" />.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.AliasAttribute.ToString(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="T:Wawa.TwitchPlays.Domains.CommandAttribute">
            <summary>
            An <see cref="T:System.Attribute" /> to attach to methods to signify that
            the command should be processed by <see cref="T:Wawa.TwitchPlays.Twitch`1" />.
            </summary>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandAttribute.#ctor(System.String,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Wawa.TwitchPlays.Domains.CommandAttribute" /> class.</summary>
            <param name="prefix">The prefix of this command.</param>
            <param name="priority">The priority of the command. A higher value means it will be evaluated sooner.</param>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.CommandAttribute.Priority">
            <summary>Gets the priority. Higher means evaluated sooner.</summary>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.CommandAttribute.Prefix">
            <summary>Gets the prefix of this command. If <see cref="M:Wawa.Optionals.Maybe.None``1" />, the prefix is inferred.</summary>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandAttribute.op_Equality(Wawa.TwitchPlays.Domains.CommandAttribute,Wawa.TwitchPlays.Domains.CommandAttribute)">
            <summary>Determines whether both have the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true" /> if both of them contain the same values,
            otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandAttribute.op_Inequality(Wawa.TwitchPlays.Domains.CommandAttribute,Wawa.TwitchPlays.Domains.CommandAttribute)">
            <summary>Determines whether both do not have the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true" /> if both of them do not contain the same values,
            otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandAttribute.Equals(Wawa.TwitchPlays.Domains.CommandAttribute)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandAttribute.Equals(Wawa.TwitchPlays.Domains.CommandAttribute,Wawa.TwitchPlays.Domains.CommandAttribute)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandAttribute.GetHashCode(Wawa.TwitchPlays.Domains.CommandAttribute)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandAttribute.Clone">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandAttribute.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandAttribute.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandAttribute.ToString">
            <inheritdoc />
        </member>
        <member name="T:Wawa.TwitchPlays.Domains.CommandInfo">
            <summary>Combines <see cref="T:Wawa.TwitchPlays.Domains.CommandAttribute" /> and <see cref="T:System.Reflection.MethodInfo" /> into one data type.</summary>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.CommandInfo.Prefix">
            <summary>
            Gets the prefix for the command, inferring from <see cref="P:Wawa.TwitchPlays.Domains.CommandInfo.Method" /> if <see cref="P:Wawa.TwitchPlays.Domains.CommandInfo.Command" /> doesn't have one.
            </summary>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.CommandInfo.Command">
            <summary>Gets the <see cref="T:Wawa.TwitchPlays.Domains.CommandAttribute" />.</summary>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.CommandInfo.Method">
            <summary>Gets the <see cref="T:System.Reflection.MethodInfo" /> to allow for invoking.</summary>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandInfo.op_Equality(Wawa.TwitchPlays.Domains.CommandInfo,Wawa.TwitchPlays.Domains.CommandInfo)">
            <summary>Determines whether both have the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true" /> if both of them contain the same values,
            otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandInfo.op_Inequality(Wawa.TwitchPlays.Domains.CommandInfo,Wawa.TwitchPlays.Domains.CommandInfo)">
            <summary>Determines whether both do not have the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true" /> if both of them do not contain the same values,
            otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandInfo.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandInfo.Equals(Wawa.TwitchPlays.Domains.CommandInfo)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandInfo.Equals(Wawa.TwitchPlays.Domains.CommandInfo,Wawa.TwitchPlays.Domains.CommandInfo)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandInfo.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandInfo.GetHashCode(Wawa.TwitchPlays.Domains.CommandInfo)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandInfo.ToString">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandInfo.Clone">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandInfo.TryFrom(System.Reflection.MethodInfo)">
            <summary>Attempts to create an instance of <see cref="T:Wawa.TwitchPlays.Domains.CommandInfo" />.</summary>
            <param name="method">The method to use to attempt to create an instance.</param>
            <returns>
            A <see cref="T:Wawa.TwitchPlays.Domains.CommandInfo" /> if a <see cref="T:Wawa.TwitchPlays.Domains.CommandAttribute" /> can be obtained
            from the parameter <paramref name="method" /> and <paramref name="method" /> has an
            appropriate return type, otherwise <see langword="null" />.
            </returns>
        </member>
        <member name="T:Wawa.TwitchPlays.Domains.Instruction">
            <summary>Defines an instruction for Twitch Plays to process.</summary>
            <remarks><para>
            Based on the advanced implementation documentation:
            https://github.com/samfundev/KtaneTwitchPlays/wiki/External-Mod-Module-Support#advanced-implementation.
            </para></remarks>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Wawa.TwitchPlays.Domains.Instruction" /> class.</summary>
            <remarks><para>Detonates the bomb when yielded.</para></remarks>
            <param name="reason">The optional reason for the explosion.</param>
            <param name="moduleName">The override of the module name that caused the explosion.</param>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.#ctor(System.Collections.Generic.IEnumerable{Wawa.TwitchPlays.Domains.Instruction})">
            <summary>Initializes a new instance of the <see cref="T:Wawa.TwitchPlays.Domains.Instruction" /> class.</summary>
            <remarks><para>Provides a nested enumeration.</para></remarks>
            <param name="enumerator">The value to pass in.</param>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.#ctor(System.Collections.Generic.IEnumerator{Wawa.TwitchPlays.Domains.Instruction})">
            <summary>Initializes a new instance of the <see cref="T:Wawa.TwitchPlays.Domains.Instruction" /> class.</summary>
            <remarks><para>Provides a nested enumeration.</para></remarks>
            <param name="enumerator">The value to pass in.</param>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.#ctor(UnityEngine.Quaternion,UnityEngine.Quaternion)">
            <summary>Initializes a new instance of the <see cref="T:Wawa.TwitchPlays.Domains.Instruction" /> class.</summary>
            <remarks><para>Changes the orientation of the bomb when yielded.</para></remarks>
            <param name="first">
            For the Bomb. The form of <c>(Quaternion.Euler(x, 0, 0) * Quaternion.Euler(0, y, 0) * (Quaternion.Euler(0, 0, z))</c>.
            </param>
            <param name="second">For the camera side view. The second one in the form of <c>Quaternion.Euler(x, y, z)</c>.</param>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.#ctor(Wawa.TwitchPlays.Domains.TwitchString)">
            <summary>Initializes a new instance of the <see cref="T:Wawa.TwitchPlays.Domains.Instruction" /> class.</summary>
            <param name="value">The value to pass in.</param>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.#ctor(System.Object)">
            <summary>Initializes a new instance of the <see cref="T:Wawa.TwitchPlays.Domains.Instruction" /> class.</summary>
            <param name="value">The value to pass in.</param>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.Instruction.FrameAdvance">
            <summary>Gets the value that can be yielded to wait for the next frame.</summary>
            <remarks><para>This value is always null. Do not dereference.</para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.Instruction.Pause">
            <summary>Gets the value that can be yielded to allow other modules to be processed in Twitch Plays.</summary>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.Instruction.Value">
            <summary>
            Gets a value indicating whether Twitch Plays should allow
            other modules to be interacted with for the current frame.
            </summary>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.op_Implicit(UnityEngine.CustomYieldInstruction)~Wawa.TwitchPlays.Domains.Instruction">
            <summary>Implicitly calls the constructor.</summary>
            <param name="customYield">The <see cref="T:UnityEngine.CustomYieldInstruction" /> to pass in to the constructor.</param>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.op_Implicit(KMSelectable)~Wawa.TwitchPlays.Domains.Instruction">
            <summary>Implicitly calls the constructor.</summary>
            <param name="selectable">The <see cref="T:KMSelectable" /> to pass in to the constructor.</param>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.op_Implicit(KMSelectable[])~Wawa.TwitchPlays.Domains.Instruction">
            <summary>Implicitly calls the constructor.</summary>
            <param name="selectables">
            The <see cref="T:KMSelectable" /> <see cref="T:System.Array" /> to pass in to the constructor.
            </param>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.op_Implicit(UnityEngine.Quaternion)~Wawa.TwitchPlays.Domains.Instruction">
            <summary>Implicitly calls the constructor.</summary>
            <param name="orientation">The <see cref="T:UnityEngine.Quaternion" /> to pass in to the constructor.</param>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.op_Implicit(Wawa.TwitchPlays.Domains.TwitchString)~Wawa.TwitchPlays.Domains.Instruction">
            <summary>Implicitly calls the constructor.</summary>
            <param name="query">The <see cref="T:Wawa.TwitchPlays.Domains.TwitchString" /> to pass in to the constructor.</param>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.op_Implicit(UnityEngine.YieldInstruction)~Wawa.TwitchPlays.Domains.Instruction">
            <summary>Implicitly calls the constructor.</summary>
            <param name="yield">The <see cref="T:UnityEngine.YieldInstruction" /> to pass in to the constructor.</param>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.op_Equality(Wawa.TwitchPlays.Domains.Instruction,Wawa.TwitchPlays.Domains.Instruction)">
            <summary>Determines whether both instances contain the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>The value <see langword="true" /> if both instances contain the same values.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.op_Inequality(Wawa.TwitchPlays.Domains.Instruction,Wawa.TwitchPlays.Domains.Instruction)">
            <summary>Determines whether both instances do not contain the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>The value <see langword="true" /> if both instances do not contain the same values.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.FromCustomYieldInstruction(UnityEngine.CustomYieldInstruction)">
            <summary>
            Converts the <see cref="T:UnityEngine.CustomYieldInstruction" /> to a <see langword="new" /> <see cref="T:Wawa.TwitchPlays.Domains.Instruction" />.
            </summary>
            <param name="customYield">The <see cref="T:UnityEngine.CustomYieldInstruction" /> instance to convert.</param>
            <returns>
            A <see langword="new" /> <see cref="T:Wawa.TwitchPlays.Domains.Instruction" /> instance encapsulating <paramref name="customYield" />.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.FromInstructions(System.Collections.Generic.IEnumerable{Wawa.TwitchPlays.Domains.Instruction})">
            <summary>
            Converts the <see cref="T:System.Collections.Generic.IEnumerable`1" /> to a <see langword="new" /> <see cref="T:Wawa.TwitchPlays.Domains.Instruction" />.
            </summary>
            <param name="enumerable">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> instance to convert.</param>
            <returns>
            A <see langword="new" /> <see cref="T:Wawa.TwitchPlays.Domains.Instruction" /> instance encapsulating <paramref name="enumerable" />.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.FromInstructions(System.Collections.Generic.IEnumerator{Wawa.TwitchPlays.Domains.Instruction})">
            <summary>
            Converts the <see cref="T:System.Collections.Generic.IEnumerator`1" /> to a <see langword="new" /> <see cref="T:Wawa.TwitchPlays.Domains.Instruction" />.
            </summary>
            <param name="enumerator">The <see cref="T:System.Collections.Generic.IEnumerator`1" /> instance to convert.</param>
            <returns>
            A <see langword="new" /> <see cref="T:Wawa.TwitchPlays.Domains.Instruction" /> instance encapsulating <paramref name="enumerator" />.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.FromInstructions(Wawa.TwitchPlays.Domains.Instruction[])">
            <summary>
            Converts the <see cref="T:System.Array" /> to a <see langword="new" /> <see cref="T:Wawa.TwitchPlays.Domains.Instruction" />.
            </summary>
            <param name="array">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> instance to convert.</param>
            <returns>
            A <see langword="new" /> <see cref="T:Wawa.TwitchPlays.Domains.Instruction" /> instance encapsulating <paramref name="array" />.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.FromKMSelectable(KMSelectable)">
            <summary>Converts the <see cref="T:KMSelectable" /> to a <see langword="new" /> <see cref="T:Wawa.TwitchPlays.Domains.Instruction" />.</summary>
            <param name="selectable">The <see cref="T:KMSelectable" /> instance to convert.</param>
            <returns>
            A <see langword="new" /> <see cref="T:Wawa.TwitchPlays.Domains.Instruction" /> instance encapsulating <paramref name="selectable" />.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.FromKMSelectableArray(KMSelectable[])">
            <summary>
            Converts the <see cref="T:KMSelectable" /> <see cref="T:System.Array" />
            to a <see langword="new" /> <see cref="T:Wawa.TwitchPlays.Domains.Instruction" />.
            </summary>
            <param name="selectable">The <see cref="T:KMSelectable" /> <see cref="T:System.Array" /> instance to convert.</param>
            <returns>
            A <see langword="new" /> <see cref="T:Wawa.TwitchPlays.Domains.Instruction" /> instance encapsulating <paramref name="selectable" />.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.FromQuaternion(UnityEngine.Quaternion)">
            <summary>Converts the <see cref="T:UnityEngine.Quaternion" /> to a <see langword="new" /> <see cref="T:Wawa.TwitchPlays.Domains.Instruction" />.</summary>
            <param name="orientation">The <see cref="T:UnityEngine.Quaternion" /> instance to convert.</param>
            <returns>
            A <see langword="new" /> <see cref="T:Wawa.TwitchPlays.Domains.Instruction" /> instance encapsulating <paramref name="orientation" />.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.FromTwitchString(Wawa.TwitchPlays.Domains.TwitchString)">
            <summary>
            Converts the <see cref="T:Wawa.TwitchPlays.Domains.TwitchString" /> to a <see langword="new" /> <see cref="T:Wawa.TwitchPlays.Domains.Instruction" />.
            </summary>
            <param name="query">The <see cref="T:Wawa.TwitchPlays.Domains.TwitchString" /> instance to convert.</param>
            <returns>
            A <see langword="new" /> <see cref="T:Wawa.TwitchPlays.Domains.Instruction" /> instance encapsulating <paramref name="query" />.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.FromYieldInstruction(UnityEngine.YieldInstruction)">
            <summary>
            Converts the <see cref="T:UnityEngine.YieldInstruction" /> to a <see langword="new" /> <see cref="T:Wawa.TwitchPlays.Domains.Instruction" />.
            </summary>
            <param name="yield">The <see cref="T:UnityEngine.YieldInstruction" /> instance to convert.</param>
            <returns>
            A <see langword="new" /> <see cref="T:Wawa.TwitchPlays.Domains.Instruction" /> instance encapsulating <paramref name="yield" />.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.Equals(Wawa.TwitchPlays.Domains.Instruction)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.Equals(Wawa.TwitchPlays.Domains.Instruction,Wawa.TwitchPlays.Domains.Instruction)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.GetHashCode(Wawa.TwitchPlays.Domains.Instruction)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.ToString">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.Clone">
            <inheritdoc />
        </member>
        <member name="T:Wawa.TwitchPlays.Domains.InstructionCore">
            <summary>Implementations for <see cref="T:Wawa.TwitchPlays.Domains.Instruction" />.</summary>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.InstructionCore.Flatten(System.Collections.Generic.IEnumerable{Wawa.TwitchPlays.Domains.Instruction})">
            <summary>Flattens the enumeration for coroutine use.</summary>
            <param name="that">This instance of <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1" /> of <see cref="T:System.Object" /> that is friendly to be used for coroutines,
            containing the values from <paramref name="that" />.
            </returns>
        </member>
        <member name="T:Wawa.TwitchPlays.Domains.ITwitchSupportable">
            <summary>Interface for Twitch Plays support.</summary>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.ITwitchSupportable.TwitchHandleForcedSolve">
            <summary>
            This method gets grabbed by Twitch Plays which is used whenever a thrown <see cref="T:System.Exception" />
            is unhandled, a votesolve/solvebomb is performed, or when an admin forces this module to be solved.
            </summary>
            <returns>A series of instructions for the Twitch Plays mod to handle in order to guarantee a solve.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.ITwitchSupportable.ProcessTwitchCommand(System.String)">
            <summary>This method gets grabbed by Twitch Plays to process a user command.</summary>
            <param name="command">The command of the user.</param>
            <returns>A list of instructions for Twitch Plays.</returns>
        </member>
        <member name="T:Wawa.TwitchPlays.Domains.TwitchString">
            <summary>Represents a <see cref="T:System.String" /> query to send to Twitch Plays.</summary>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.TwitchString.AutoSolve">
            <summary>Gets a Twitch Plays query.</summary>
            <remarks><para>
            Yield return this to indicate automatically solving the module, as if it threw an exception while solving.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.TwitchString.CancelDetonate">
            <summary>Gets a Twitch Plays query.</summary>
            <remarks><para>
            Yield return this to indicate cancelling a previously issued delayed detonation command on the same module.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.TwitchString.Cancelled">
            <summary>Gets a Twitch Plays query.</summary>
            <remarks><para>
            Yield return this to indicate that you have stopped processing the command in response to the
            <see cref="F:Wawa.TwitchPlays.Twitch`1.TwitchShouldCancelCommand" /> bool being set to <see langword="true" />.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.TwitchString.EndMultipleStrikes">
            <summary>Gets a Twitch Plays query.</summary>
            <remarks><para>
            Yield return this to indicate that the strike tracker should be enabled.
            If any strikes were issued during the time it was disabled,
            they will be awarded and the routine stopped at that point,
            otherwise, it will just cancel the "<c>VoteNay Mod {id} got 0 strikes! +0 strike to {Nickname}</c>"
            message that would otherwise be posted.
            Likewise, if the module was solved at the time this command is issued,
            the processing will be stopped as of that point as well.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.TwitchString.EndWaitingMusic">
            <summary>Gets a Twitch Plays query.</summary>
            <remarks><para>Yield return this to indicate stopping the waiting music mid-command.</para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.TwitchString.HideCamera">
            <summary>Gets a Twitch Plays query.</summary>
            <remarks><para>
            Yield return this to hide the heads-up display and cameras while doing quaternion rotations,
            if it is expected that the camera/hud will get in the way.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.TwitchString.MultipleStrikes">
            <summary>Gets a Twitch Plays query.</summary>
            <remarks><para>
            Yield return this to indicate that the issued command is going to cause more than one strike,
            so should disable the internal strike tracker in order to avoid flooding the chat with
            "<c>VoteNay Mod {id} got a strike! +1 strike to {Nickname}</c>" for as many strikes as will be awarded.
            This also disables the internal solve tracker as well. This allows for sending
            additional messages or continue processing commands regardless of the solve/strike state.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.TwitchString.Solve">
            <summary>Gets a Twitch Plays query.</summary>
            <remarks><para>
            Yield return this to indicate that this command will solve the module at some later point;
            all this does is tell Twitch Plays to attribute the solve to the author of this command.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.TwitchString.Strike">
            <summary>Gets a Twitch Plays query.</summary>
            <remarks><para>
            Yield return this to indicate that this command will cause a strike at some later point;
            all this does is tell Twitch Plays to attribute the strike to the author of this command.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.TwitchString.ToggleWaitingMusic">
            <summary>Gets a Twitch Plays query.</summary>
            <remarks><para>Yield return this to toggle the waiting music on and off mid-command.</para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.TwitchString.TryCancelSequence">
            <summary>Gets a Twitch Plays query.</summary>
            <remarks><para>
            Yield return this to indicate that the <c>KMSelectable[]</c> sequence that follows this command should be
            cancelled if a "<c>!cancel</c>" or "<c>!stop</c>" is issued mid-way through that sequence.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.TwitchString.UnsubmittablePenalty">
            <summary>Gets a Twitch Plays query.</summary>
            <remarks><para>
            Yield return this to indicate that the command couldn't submit an answer and should only be used to prevent
            users from guessing the answer. This should not be used if an answer could never be submittable for a module.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.TwitchString.WaitingMusic">
            <summary>Gets a Twitch Plays query.</summary>
            <remarks><para>
            Yield return this to indicate playing the waiting music if a command will take long to finish.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.TwitchString.Message">
            <summary>Gets the message to send to Twitch Plays.</summary>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.op_Implicit(Wawa.TwitchPlays.Domains.TwitchString)~System.String">
            <summary>Implicitly calls the property <see cref="P:Wawa.TwitchPlays.Domains.TwitchString.Message" />.</summary>
            <param name="query">The <see cref="T:Wawa.TwitchPlays.Domains.TwitchString" /> to access the property from.</param>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.op_Equality(Wawa.TwitchPlays.Domains.TwitchString,Wawa.TwitchPlays.Domains.TwitchString)">
            <summary>Determines whether both instances contain the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>The value <see langword="true" /> if both instances contain the same values.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.op_Inequality(Wawa.TwitchPlays.Domains.TwitchString,Wawa.TwitchPlays.Domains.TwitchString)">
            <summary>Determines whether both instances do not contain the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>The value <see langword="true" /> if both instances do not contain the same values.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.StrikeMessage(System.String)">
            <summary>Yield return this to allow you to tell the user why they got a strike if it isn't clear.</summary>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.TryCancel(System.String)">
            <summary>
            Yield return this to indicate that this command is allowed to be cancelled at the given time of the yield.
            </summary>
            <remarks><para>
            Just know that you won't be able to clean up if you do your cancel this way,
            and there is a pending <c>!cancel</c> or <c>!stop</c>.
            </para></remarks>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.TryWaitCancel(System.Single,System.String)">
            <summary>
            Yield return this to cause Twitch Plays to wait for the given time,
            and any time during the entire duration, the command may cancel.
            </summary>
            <remarks><para>
            Like <see cref="M:Wawa.TwitchPlays.Domains.TwitchString.TryCancel(System.String)" />, you won't be able to clean up if you cancel this way.
            Also like <see cref="M:Wawa.TwitchPlays.Domains.TwitchString.TryCancel(System.String)" />, <paramref name="message" /> is optional.
            </para></remarks>
            <param name="time">The amount of time to wait.</param>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.SendToChat(System.String)">
            <summary>Yield return this to send a chat directly to twitch chat.</summary>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.SendToChatError(System.String)">
            <summary>Yield return this to send a message to the chat about why a users' command was invalid.</summary>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.SendDelayedMessage(System.Single,System.String)">
            <summary>Yield return this to send a message to chat after <paramref name="time" /> seconds.</summary>
            <param name="time">The amount of time to wait before the message gets sent.</param>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.Detonate(System.Nullable{System.Single},System.String)">
            <summary>Yield return this to explode the bomb instantly.</summary>
            <remarks><para>
            <paramref name="time" /> is specified in number of seconds before the bomb explodes.
            (Note, sending another detonate command will auto-cancel the previous one on
            the same module if it hasn't happened already.).
            <paramref name="message" /> is the message to send to chat upon detonation.
            Both of the parameters are optional.
            </para></remarks>
            <param name="time">The amount of time before the bomb blows up.</param>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.SkipTime(System.Single)">
            <summary>Yield return this to try advancing the clock to the specified time.</summary>
            <remarks><para>
            You must put the full time you wish to skip to, and this time either needs to be less than the current time,
            if in normal/time mode, or greater than the current time, if in zen mode.
            Example, if you wanted to set the clock to 5:24, then you do "<c>SkipTime(324)</c>".
            You can target partway through the seconds, such as "<c>SkipTime(45.28f)</c>",
            which would then set the clock to 45.28, provided that time has NOT gone by already. You must also
            set <see cref="P:Wawa.TwitchPlays.Twitch`1.IsTimeSkippable" /> to <see langword="true" />, for this function to work.
            </para></remarks>
            <param name="seconds">The time to skip to in seconds.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.AwardPoints(System.Int32)">
            <summary>Yield return this to award the user that sent the command points directly.</summary>
            <remarks><para>
            This is currently used for mods like Souvenir to give points to users that answered the questions equally.
            </para></remarks>
            <param name="points">The amount of points to award. Negatives supported.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.AwardPointsOnSolve(System.Int32)">
            <summary>
            Yield return this to award the last user that sent the command points when the module is solved.
            </summary>
            <remarks><para>
            The module must prevent any user from sending commands afterward in order for Twitch Plays
            to award points to the correct user. This is currently used by the Twin module
            when extra points must be given but the module is not solved immediately.
            </para></remarks>
            <param name="points">The amount of points to award. Negatives supported.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.Equals(Wawa.TwitchPlays.Domains.TwitchString)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.Equals(Wawa.TwitchPlays.Domains.TwitchString,Wawa.TwitchPlays.Domains.TwitchString)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.GetHashCode(Wawa.TwitchPlays.Domains.TwitchString)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.ToString">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.Clone">
            <inheritdoc />
        </member>
        <member name="T:Wawa.TwitchPlays.Domains.YieldEventArgs">
            <summary>An <see cref="T:System.EventArgs" /> for yielded items.</summary>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.YieldEventArgs.#ctor(Wawa.TwitchPlays.Domains.Instruction)">
            <summary>Initializes a new instance of the <see cref="T:Wawa.TwitchPlays.Domains.YieldEventArgs" /> class.</summary>
            <param name="o">The value to store.</param>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.YieldEventArgs.Query">
            <summary>Gets the value that was yielded.</summary>
            <remarks><para>
            A <see langword="null" /> <see cref="T:Wawa.TwitchPlays.Domains.Instruction" /> is a completely valid query,
            so this value is therefore around a <see cref="T:Wawa.Optionals.Maybe`1" />.
            </para></remarks>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.YieldEventArgs.op_Equality(Wawa.TwitchPlays.Domains.YieldEventArgs,Wawa.TwitchPlays.Domains.YieldEventArgs)">
            <summary>Determines whether both instances point to the same component.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true" /> if both of them point to the same component, otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.YieldEventArgs.op_Inequality(Wawa.TwitchPlays.Domains.YieldEventArgs,Wawa.TwitchPlays.Domains.YieldEventArgs)">
            <summary>Determines whether both instances do not point to the same component.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true" /> if both of them do not point to the same component,
            otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.YieldEventArgs.Equals(Wawa.TwitchPlays.Domains.YieldEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.YieldEventArgs.Equals(Wawa.TwitchPlays.Domains.YieldEventArgs,Wawa.TwitchPlays.Domains.YieldEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.YieldEventArgs.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.YieldEventArgs.GetHashCode(Wawa.TwitchPlays.Domains.YieldEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.YieldEventArgs.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.YieldEventArgs.Clone">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.YieldEventArgs.ToString">
            <summary>Uses <see cref="M:Wawa.Modules.Stringifier.Stringify``1(``0,System.Boolean,System.Boolean)" /> on <see cref="P:Wawa.TwitchPlays.Domains.YieldEventArgs.Query" />.</summary>
            <returns>A <see cref="T:System.String" /> representation of <see cref="P:Wawa.TwitchPlays.Domains.YieldEventArgs.Query" />.</returns>
        </member>
        <member name="T:Wawa.TwitchPlays.Internals.Globals">
            <summary>Contains static methods able to be accessed from anywhere within this library.</summary>
        </member>
        <member name="F:Wawa.TwitchPlays.Internals.Globals.Bindings">
            <summary>The default binding flags throughout the library.</summary>
        </member>
        <member name="F:Wawa.TwitchPlays.Internals.Globals.FieldBindings">
            <summary>The default binding flags throughout the library.</summary>
        </member>
        <member name="F:Wawa.TwitchPlays.Internals.Globals.Ordinal">
            <summary>The default string comparison throughout the library.</summary>
        </member>
        <member name="F:Wawa.TwitchPlays.Internals.Globals.OrdinalIgnoreCase">
            <summary>The default string comparison throughout the library.</summary>
        </member>
        <member name="F:Wawa.TwitchPlays.Internals.Globals.InternalField">
            <summary>Field name generated by enums.</summary>
        </member>
        <member name="M:Wawa.TwitchPlays.Internals.Globals.Reason(Wawa.TwitchPlays.Internals.ParseError,System.Type@)">
            <summary>Creates a human-friendly <see langword="string" /> representing the reason for the error.</summary>
            <param name="err">The error to convert.</param>
            <param name="type">The type that was used.</param>
            <returns>A human-friendly <see langword="string" /> representing the reason for the error.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Internals.Globals.Show(System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo})">
            <summary>Gets a <see cref="T:System.String" /> representation of parameters.</summary>
            <param name="parameters">The parameters to make a string representation of.</param>
            <returns>A <see cref="T:System.String" /> representation of the parameter <paramref name="parameters" />.</returns>
        </member>
        <member name="T:Wawa.TwitchPlays.Internals.ParseError">
            <summary>Defines parse errors.</summary>
        </member>
        <member name="F:Wawa.TwitchPlays.Internals.ParseError.Empty">
            <summary>Indicates that the query is empty.</summary>
        </member>
        <member name="F:Wawa.TwitchPlays.Internals.ParseError.Field">
            <summary>Indicates that a field of the same name or alias could not be found.</summary>
        </member>
        <member name="F:Wawa.TwitchPlays.Internals.ParseError.NoMatch">
            <summary>Indicates that the <see cref="M:System.Int32.TryParse(System.String,System.Int32@)" /> method returned false.</summary>
        </member>
        <member name="F:Wawa.TwitchPlays.Internals.ParseError.Unserializable">
            <summary>Indicates that the type is unserializable.</summary>
        </member>
        <member name="T:Wawa.TwitchPlays.ITwitchDeclarable">
            <summary>Interface for non-generic <see cref="T:Wawa.TwitchPlays.Twitch`1" />.</summary>
        </member>
        <member name="P:Wawa.TwitchPlays.ITwitchDeclarable.IsPrintingYields">
            <summary>
            Gets or sets a value indicating whether values yielded from a
            Twitch Plays <see cref="T:UnityEngine.Coroutine" /> should be logged.
            </summary>
            <remarks><para>
            Particularily useful as a debugging tool, whether it be in the editor or in-game.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.ITwitchDeclarable.IsCancelCommand">
            <summary>
            Gets a value indicating whether it should cancel command processing.
            </summary>
            <remarks>
            <para>
            If this returns <see langword="true" />,
            then stop processing the command, clean up, then do a <c><see langword="yield" /> <see langword="return" />
            TwitchString.Cancelled;</c> to acknowledge the cancel.
            </para><para>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>,
            therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in
            <see cref="F:KMBombModule.OnActivate" /> or later.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.ITwitchDeclarable.IsTime">
            <summary>Gets a value indicating whether it is in Time Mode, where solves change the timer.</summary>
            <remarks><para>This is useful for modules that use the timer's value.
            </para><para>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>,
            therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in
            <see cref="F:KMBombModule.OnActivate" /> or later.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.ITwitchDeclarable.IsTimeSkippable">
            <summary>
            Gets a value indicating whether it should allow for the timer to be skipped when the module it is in,
            as well as any other modules that would like to skip time, are the only unsolved modules left on the bomb.
            </summary>
            <remarks><para>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>,
            therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in
            <see cref="F:KMBombModule.OnActivate" /> or later.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.ITwitchDeclarable.IsZen">
            <summary>
            Gets a value indicating whether the timer is counting up instead of down, for special cases,
            such as controlling how to sort button release times, or whether there is a low timer event or not.
            </summary>
            <remarks><para>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>,
            therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in
            <see cref="F:KMBombModule.OnActivate" /> or later.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.ITwitchDeclarable.Help">
            <summary>Gets or sets the help message that gets sent when typing <c>!{id} help</c>.</summary>
        </member>
        <member name="P:Wawa.TwitchPlays.ITwitchDeclarable.Manual">
            <summary>
            Gets or sets the manual that is looked up on The Manual Repository when
            <c>!{id} manual</c> is entered into chat.
            </summary>
        </member>
        <member name="P:Wawa.TwitchPlays.ITwitchDeclarable.Abandons">
            <summary>Gets the list that contains modules that it should stop processing.</summary>
            <remarks><para>
            Currently, the only module that uses this capability is Souvenir.
            </para><para>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>,
            therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in
            <see cref="F:KMBombModule.OnActivate" /> or later.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.ITwitchDeclarable.Inner">
            <summary>Gets the module that is attached to this instance.</summary>
        </member>
        <member name="M:Wawa.TwitchPlays.ITwitchDeclarable.ForceSolve">
            <summary>
            When the module runs into an exception or the module is forced to be solved, this method is used.
            </summary>
            <remarks><para>
            Make sure that the module is solved before this method closes, otherwise it causes a forced-solve.
            </para></remarks>
            <returns>A series of instructions for the Twitch Plays mod to handle in order to guarantee a solve.</returns>
        </member>
        <member name="T:Wawa.TwitchPlays.ITwitchMutable">
            <summary>Interface to access internal editing of boolean values.</summary>
        </member>
        <member name="M:Wawa.TwitchPlays.ITwitchMutable.SetIsCancelCommand(System.Boolean@)">
            <summary>Sets the inner field of <see cref="P:Wawa.TwitchPlays.ITwitchDeclarable.IsCancelCommand" />.</summary>
            <remarks><para>Intended for use in <see cref="T:Wawa.TwitchPlays.TwitchEditor" />.</para></remarks>
            <param name="value">The value to set the field.</param>
        </member>
        <member name="M:Wawa.TwitchPlays.ITwitchMutable.SetIsTime(System.Boolean@)">
            <summary>Sets the inner field of <see cref="P:Wawa.TwitchPlays.ITwitchDeclarable.IsTime" />.</summary>
            <remarks><para>Intended for use in <see cref="T:Wawa.TwitchPlays.TwitchEditor" />.</para></remarks>
            <param name="value">The value to set the field.</param>
        </member>
        <member name="M:Wawa.TwitchPlays.ITwitchMutable.SetIsTimeSkippable(System.Boolean@)">
            <summary>Sets the inner field of <see cref="P:Wawa.TwitchPlays.ITwitchDeclarable.IsTimeSkippable" />.</summary>
            <remarks><para>Intended for use in <see cref="T:Wawa.TwitchPlays.TwitchEditor" />.</para></remarks>
            <param name="value">The value to set the field.</param>
        </member>
        <member name="M:Wawa.TwitchPlays.ITwitchMutable.SetIsTP(System.Boolean@)">
            <summary>Sets the inner field of <see cref="P:Wawa.Modules.ISolvable.IsTP" />.</summary>
            <remarks><para>Intended for use in <see cref="T:Wawa.TwitchPlays.TwitchEditor" />.</para></remarks>
            <param name="value">The value to set the field.</param>
        </member>
        <member name="M:Wawa.TwitchPlays.ITwitchMutable.SetIsZen(System.Boolean@)">
            <summary>Sets the inner field of <see cref="P:Wawa.TwitchPlays.ITwitchDeclarable.IsZen" />.</summary>
            <remarks><para>Intended for use in <see cref="T:Wawa.TwitchPlays.TwitchEditor" />.</para></remarks>
            <param name="value">The value to set the field.</param>
        </member>
        <member name="T:Wawa.TwitchPlays.TwitchEditor">
            <summary>Custom inspector for <see cref="T:Wawa.TwitchPlays.Twitch`1" />.</summary>
        </member>
        <member name="M:Wawa.TwitchPlays.TwitchEditor.OnInspectorGUI">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.TwitchEditor.ToString">
            <inheritdoc />
        </member>
        <member name="T:Wawa.TwitchPlays.Twitch`1">
            <summary>
            Base class for TwitchPlays support for solvable and needy modded modules in Keep Talking and Nobody Explodes.
            </summary>
            <typeparam name="TMod">
            The <see cref="T:System.Type" /> of <see cref="T:Mod" /> to implement Twitch Plays support for.
            </typeparam>
        </member>
        <member name="E:Wawa.TwitchPlays.Twitch`1.OnYield">
            <summary>
            Gets or sets an event invoked whenever any command (including <see cref="P:Wawa.TwitchPlays.Domains.TwitchString.AutoSolve" />) yields
            something and is processed. The value that it yielded is passed in.
            </summary>
        </member>
        <member name="P:Wawa.TwitchPlays.Twitch`1.IsPrintingYields">
            <inheritdoc />
        </member>
        <member name="P:Wawa.TwitchPlays.Twitch`1.IsCancelCommand">
            <inheritdoc />
        </member>
        <member name="P:Wawa.TwitchPlays.Twitch`1.IsTime">
            <inheritdoc />
        </member>
        <member name="P:Wawa.TwitchPlays.Twitch`1.IsTimeSkippable">
            <inheritdoc />
        </member>
        <member name="P:Wawa.TwitchPlays.Twitch`1.IsTP">
            <inheritdoc />
        </member>
        <member name="P:Wawa.TwitchPlays.Twitch`1.IsZen">
            <inheritdoc />
        </member>
        <member name="P:Wawa.TwitchPlays.Twitch`1.Help">
            <inheritdoc />
        </member>
        <member name="P:Wawa.TwitchPlays.Twitch`1.Manual">
            <inheritdoc />
        </member>
        <member name="P:Wawa.TwitchPlays.Twitch`1.Abandons">
            <inheritdoc />
        </member>
        <member name="P:Wawa.TwitchPlays.Twitch`1.Wawa#TwitchPlays#ITwitchDeclarable#Inner">
            <inheritdoc />
        </member>
        <member name="P:Wawa.TwitchPlays.Twitch`1.Module">
            <summary>Gets the instance of the module.</summary>
        </member>
        <member name="P:Wawa.TwitchPlays.Twitch`1.AutoImplementedHelp">
            <summary>Gets the suggested help command. This is a fallback value used when one isn't specified.</summary>
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.ProcessTwitchCommand(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.TwitchHandleForcedSolve">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.ForceSolve">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.UntilSolve">
            <summary>
            You can <see langword="yield" /> <see langword="return" /> this to repeatedly
            <see langword="yield" /> <see langword="return" /> <see langword="true" /> until the module is solved.
            </summary>
            <returns>
            Repeatedly <see langword="true" />, halting when <see cref="P:Wawa.Modules.State.IsSolved" />
            from <see cref="P:Wawa.TwitchPlays.Twitch`1.Module" /> is <see langword="true" />.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.UntilStrike">
            <summary>
            You can <see langword="yield" /> <see langword="return" /> this to repeatedly
            <see langword="yield" /> <see langword="return" /> <see langword="true" /> until the module has struck.
            </summary>
            <returns>
            Repeatedly <see langword="true" />, halting when <see cref="P:Wawa.Modules.State.HasStruck" />
            from <see cref="P:Wawa.TwitchPlays.Twitch`1.Module" /> is <see langword="true" />.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.Sequence(System.Collections.Generic.IEnumerable{KMSelectable},System.Single)">
            <summary>
            Presses a sequence of buttons in order of <paramref name="selectables" />,
            waiting <paramref name="duration" /> seconds in-between each, and interrupting as soon as
            <see cref="P:Wawa.Modules.State.HasStruck" /> is <see langword="true" />.
            </summary>
            <param name="selectables">The array of selectables to interact with.</param>
            <param name="duration">The delay between each button press in seconds.</param>
            <returns>A sequence of button presses for Twitch Plays to process.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.IndexedSequence(System.Collections.Generic.IList{KMSelectable},System.Single,System.Int32[])">
            <summary>
            Presses a sequence of buttons according to <paramref name="indices" /> within <paramref name="selectables" />,
            waiting <paramref name="duration" /> seconds in-between each, and interrupting as soon as
            <see cref="P:Wawa.Modules.State.HasStruck" /> is true.
            </summary>
            <param name="selectables">The array of selectables to interact with.</param>
            <param name="duration">The delay between each button press in seconds.</param>
            <param name="indices">The indices to press within the array.</param>
            <returns>A sequence of button presses for Twitch Plays to process.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.Wawa#TwitchPlays#ITwitchMutable#SetIsCancelCommand(System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.Wawa#TwitchPlays#ITwitchMutable#SetIsTime(System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.Wawa#TwitchPlays#ITwitchMutable#SetIsTimeSkippable(System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.Wawa#TwitchPlays#ITwitchMutable#SetIsTP(System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.Wawa#TwitchPlays#ITwitchMutable#SetIsZen(System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.Wawa#Modules#ISolvable#ForceTPSolve">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.Split(System.String,System.String)">
            <summary>
            Splits a <see cref="T:System.String" /> into an <see cref="T:System.Array" /> of <see cref="T:System.String" /> values based on a separator.
            </summary>
            <param name="instance">The <see cref="T:System.String" /> to split.</param>
            <param name="separator">The separator to split each <see cref="T:System.String" /> with.</param>
            <returns>
            An <see cref="T:System.Array" /> of <see cref="T:System.String" /> values which are substrings of <paramref name="instance" />
            based on <paramref name="separator" />. Empty entries are omitted.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.YieldWhile``1(``0,System.Func{System.Boolean})">
            <summary>
            You can <see langword="yield" /> <see langword="return" /> this to repeatedly
            <see langword="yield" /> <see langword="return" /> an item until a condition is no longer met.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type" /> of the items that are yielded.</typeparam>
            <param name="item">The item to yield repeatedly.</param>
            <param name="condition">The condition to repeatedly check until it returns <see langword="false" />.</param>
            <returns>
            <paramref name="item" /> continuously until <paramref name="condition" /> is <see langword="false" />.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.YieldUntil``1(``0,System.Func{System.Boolean})">
            <summary>
            You can <see langword="yield" /> <see langword="return" /> this to repeatedly
            <see langword="yield" /> <see langword="return" /> an item until a condition is met.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type" /> of the items that are yielded.</typeparam>
            <param name="item">The item to yield repeatedly.</param>
            <param name="condition">The condition to repeatedly check until it returns <see langword="false" />.</param>
            <returns>
            <paramref name="item" /> continuously until <paramref name="condition" /> is <see langword="true" />.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.Awake">
            <summary>
            Logs version numbers and automatically sets <see cref="P:Wawa.TwitchPlays.Twitch`1.Help" />.
            Be sure to call this method if you are implementing Awake.
            </summary>
        </member>
    </members>
</doc>
