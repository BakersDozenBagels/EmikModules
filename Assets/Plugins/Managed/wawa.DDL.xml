<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>wawa.DDL</name>
    </assembly>
    <members>
        <member name="T:System.Diagnostics.Contracts.PureAttribute">
            <summary>Indicates that a type or method is pure, that is, it does not make any visible state changes.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue" />, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute" /> class
            with the specified return value condition.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition is <see langword="true" /> or <see langword="false" />.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue" />,
            the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute" /> class
            with the specified return value condition.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition is <see langword="true" /> or <see langword="false" />.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute" /> class
            with the associated parameter name.
            </summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute" /> class
            with the specified parameter value.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets a value indicating whether the condition parameter value
            is <see langword="true" /> or <see langword="false" />.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute" /> class with a field or property member.
            </summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute" /> class
            with the list of field and property members.
            </summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute" /> class
            with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute" /> class
            with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition is <see langword="true" /> or <see langword="false" />.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlyCollection`1">
            <summary>Provides a read-only, covariant view of a generic list.</summary>
            <typeparam name="T">The type of item on the list.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyCollection`1.Count">
            <summary>Gets the amount of items on the list.</summary>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlyDictionary`2">
            <summary>Provides a read-only view of a generic dictionary.</summary>
            <typeparam name="TKey">The type of key in the dictionary.</typeparam>
            <typeparam name="TValue">The type of value in the dictionary.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Keys">
            <summary>Gets all enumeration of all keys.</summary>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Values">
            <summary>Gets an enumeration of all values.</summary>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)">
            <summary>Gets the value of the key.</summary>
            <param name="key">The key to index.</param>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>Determines whether a key exists in this dictionary.</summary>
            <param name="key">The key to check.</param>
            <returns>
            The value <see langword="true" /> if the key exists in the dictionary, otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>Determines whether a key exists in this dictionary and extracts the value.</summary>
            <param name="key">The key to check.</param>
            <param name="value">The value to output.</param>
            <returns>
            The value <see langword="true" /> if the key exists in the dictionary, otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlyList`1">
            <summary>Represents a read-only collection of elements that can be accessed by index.</summary>
            <typeparam name="T">The type of elements in the read-only list.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)">
            <summary>Performs an index operation on the list.</summary>
            <param name="index">The item to retrieve.</param>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlySet`1">
            <summary>Provides a readonly abstraction of a set.</summary>
            <typeparam name="T">The type of elements in the set.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.Contains(`0)">
            <summary>Determines if the set contains a specific item.</summary>
            <param name="item">The item to check if the set contains.</param>
            <returns><see langword="true" /> if found; otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determines whether the current set is a proper (strict) subset of a specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true" /> if the current set is a proper subset of other; otherwise <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determines whether the current set is a proper (strict) superset of a specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true" /> if the collection is a proper superset of other; otherwise <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determine whether the current set is a subset of a specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns><see langword="true" /> if the current set is a subset of other; otherwise <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determine whether the current set is a super set of a specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns><see langword="true" /> if the current set is a subset of other; otherwise <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determines whether the current set overlaps with the specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true" /> if the current set and other share at least one common element;
            otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determines whether the current set and the specified collection contain the same elements.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true" /> if the current set is equal to other; otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null" />.</exception>
        </member>
        <member name="T:System.Collections.Generic.ISet`1">
            <summary>
            Generic collection that guarantees the uniqueness of its elements, as defined by some comparer.
            It also supports basic set operations such as Union, Intersection, Complement and Exclusive Complement.
            </summary>
            <typeparam name="T">The type of element in the set.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Transforms this set so it contains no elements that are also in an <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>Transforms this set into its intersection with an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Transforms this set so it contains elements initially in this or an <see cref="T:System.Collections.Generic.IEnumerable`1" />, but not both.
            </summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>Transforms this set into its union with an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.Add(`0)">
            <summary>Adds an item to the set.</summary>
            <param name="item">The item to add.</param>
            <returns>The value <see langword="true" /> if added, <see langword="false" /> if duplicate.</returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Checks if this set is a subset of an <see cref="T:System.Collections.Generic.IEnumerable`1" />, but not the same as it.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
            <returns>The value <see langword="true" /> if a match is found, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Checks if this set is a superset of an <see cref="T:System.Collections.Generic.IEnumerable`1" />, but not the same as it.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
            <returns>The value <see langword="true" /> if a match is found, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Checks if this set is a subset of an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
            <returns>The value <see langword="true" /> if a match is found, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Checks if this set is a superset of an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
            <returns>The value <see langword="true" /> if a match is found, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>Checks if this set has any elements in common with an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
            <returns>The value <see langword="true" /> if a match is found, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if this set contains the same and only the same elements as an <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to transform with.</param>
            <returns>The value <see langword="true" /> if a match is found, otherwise <see langword="false" />.</returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerFilePathAttribute">
            <inheritdoc />
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerLineNumberAttribute">
            <inheritdoc />
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerMemberNameAttribute">
            <inheritdoc />
        </member>
        <member name="T:NullGuard.AllowNullAttribute">
            <summary>Prevents the injection of null checking (implicit mode only).</summary>
        </member>
        <member name="T:Wawa.DDL.Access">
            <summary>A class for accessing things from the game.</summary>
        </member>
        <member name="P:Wawa.DDL.Access.IsKtane">
            <summary>Gets a value indicating whether the runtime is in-game.</summary>
            <remarks><para>Opposite of <see cref="P:UnityEngine.Application.isEditor" />, but as a pure getter.</para></remarks>
        </member>
        <member name="M:Wawa.DDL.Access.FromGame``2(``0,System.Converter{``0,``1},``1)">
            <summary>Method for obtaining something from the game, ensuring that the Unity editor stays happy.</summary>
            <typeparam name="T">The context item, be sure that this doesn't come from the game.</typeparam>
            <typeparam name="TResult">The type of the return, be sure that this doesn't come from the game.</typeparam>
            <param name="context">The context element to pass into the callback.</param>
            <param name="factory">The factory containing the game data.<p /><c>[RequireStaticDelegate]</c></param>
            <param name="def">The default value.</param>
            <returns>The value from <paramref name="factory" />, or <see langword="default" />.</returns>
        </member>
        <member name="T:Wawa.DDL.KMBombStrikeExtensions">
            <summary>Allows a <see cref="T:KMBomb" /> to control strikes.</summary>
        </member>
        <member name="M:Wawa.DDL.KMBombStrikeExtensions.GetStrikes(KMBomb)">
            <summary>Gets the number of strikes.</summary>
            <remarks><para>In the editor, this value always returns 0.</para></remarks>
            <param name="that">The <see cref="T:KMBomb" /> module instance to grab strikes from.</param>
            <returns>The number of strikes.</returns>
        </member>
        <member name="M:Wawa.DDL.KMBombStrikeExtensions.GetRate(KMBomb)">
            <summary>Gets the rate in which the timer ticks.</summary>
            <remarks><para>In the editor, this value always returns 1.</para></remarks>
            <param name="that">The <see cref="T:KMBomb" /> module instance to grab the rate from.</param>
            <returns>The speed of the ticking.</returns>
        </member>
        <member name="M:Wawa.DDL.KMBombStrikeExtensions.SetRate(KMBomb,System.Single)">
            <summary>Sets the rate in which the timer ticks.</summary>
            <remarks><para>In the editor, this method does nothing.</para></remarks>
            <param name="that">The <see cref="T:KMBomb" /> module instance to grab the rate from.</param>
            <param name="value">The value to set it to.</param>
            <returns>The parameter <see cref="T:KMBomb" />.</returns>
        </member>
        <member name="M:Wawa.DDL.KMBombStrikeExtensions.SetStrikes(KMBomb,System.Int32)">
            <summary>Sets the number of strikes.</summary>
            <remarks><para>In the editor, this method does nothing.</para></remarks>
            <param name="that">The <see cref="T:KMBomb" /> module instance to grab strikes from.</param>
            <param name="value">The value to set it to.</param>
            <returns>The parameter <see cref="T:KMBomb" />.</returns>
        </member>
        <member name="T:Wawa.DDL.Lookup">
            <summary>Allows for querying general data from the game.</summary>
        </member>
        <member name="P:Wawa.DDL.Lookup.Mods">
            <summary>Gets the dictionary of loaded mods.</summary>
            <remarks><para>
            In the editor, this value returns an instance of <see cref="T:System.Collections.Hashtable" />, initialized as empty.
            </para></remarks>
        </member>
        <member name="M:Wawa.DDL.Lookup.Localized(System.String)">
            <summary>Gets the localized value of a <see cref="T:System.String" /> term.</summary>
            <remarks><para>In the editor, this value returns <see cref="M:Wawa.Optionals.Maybe.None``1" />.</para></remarks>
            <param name="term">The term to get the localized <see cref="T:System.String" /> of.</param>
            <returns>The localized <see cref="T:System.String" /> of <paramref name="term" />.</returns>
        </member>
        <member name="T:Wawa.DDL.Missions">
            <summary>Allows access into current mission metadata.</summary>
        </member>
        <member name="F:Wawa.DDL.Missions.ExampleDescription">
            <summary>The default value for the respective property.</summary>
        </member>
        <member name="F:Wawa.DDL.Missions.ExampleId">
            <summary>The default value for the respective property.</summary>
        </member>
        <member name="F:Wawa.DDL.Missions.ExampleLanguageCode">
            <summary>The default value for the respective property.</summary>
        </member>
        <member name="F:Wawa.DDL.Missions.ExampleName">
            <summary>The default value for the respective property.</summary>
        </member>
        <member name="P:Wawa.DDL.Missions.IsPacingEvents">
            <summary>Gets or sets a value indicating whether pacing events are enabled.</summary>
            <remarks><para>In the editor, this returns <see keyword="false" />.</para></remarks>
        </member>
        <member name="P:Wawa.DDL.Missions.Description">
            <summary>Gets the description as it appears in the bomb binder.</summary>
            <remarks><para>In the editor, this returns <see cref="F:Wawa.DDL.Missions.ExampleDescription" />.</para></remarks>
        </member>
        <member name="P:Wawa.DDL.Missions.Id">
            <summary>Gets the ID of the mission.</summary>
            <remarks><para>In the editor, this returns <see cref="F:Wawa.DDL.Missions.ExampleId" />.</para></remarks>
        </member>
        <member name="P:Wawa.DDL.Missions.LanguageCode">
            <summary>Gets the current language code.</summary>
            <remarks><para>In the editor, this returns <see cref="F:Wawa.DDL.Missions.ExampleLanguageCode" />.</para></remarks>
        </member>
        <member name="P:Wawa.DDL.Missions.Name">
            <summary>Gets the mission name as it appears in the bomb binder.</summary>
            <remarks><para>In the editor, this returns <see cref="F:Wawa.DDL.Missions.ExampleName" />.</para></remarks>
        </member>
        <member name="T:Wawa.DDL.Preferences">
            <summary>Allows access into current user preferences.</summary>
        </member>
        <member name="F:Wawa.DDL.Preferences.MaxVolume">
            <summary>The maximum volume allowed by the game and default value for the respective properties.</summary>
        </member>
        <member name="P:Wawa.DDL.Preferences.IsVR">
            <summary>Gets a value indicating whether the game is being played on VR.</summary>
            <remarks><para>In the editor, this value always returns <see langword="false" />.</para></remarks>
        </member>
        <member name="P:Wawa.DDL.Preferences.Music">
            <summary>Gets or sets the current music volume from the dossier menu. Ranges 0 to 100.</summary>
            <remarks><para>In the editor, this returns <see cref="F:Wawa.DDL.Preferences.MaxVolume" />.</para></remarks>
        </member>
        <member name="P:Wawa.DDL.Preferences.Sound">
            <summary>Gets or sets the current sound effect volume from the dossier menu. Ranges 0 to 100.</summary>
            <remarks><para>In the editor, this returns <see cref="F:Wawa.DDL.Preferences.MaxVolume" />.</para></remarks>
        </member>
    </members>
</doc>
